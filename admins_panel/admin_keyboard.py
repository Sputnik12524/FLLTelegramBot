from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from database.models import async_session, User, User_Teams
import os

# –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "admin123")

class AdminAuth(StatesGroup):
    waiting_password = State()

class AdminBroadcast(StatesGroup):
    waiting_message = State()

router = Router()

def get_admin_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="admin_teams")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="admin_clear")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å", callback_data="admin_close")]
    ])

def get_back_to_admin_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_back")]
    ])

def get_confirm_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="admin_confirm_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="admin_confirm_no")]
    ])

@router.message(Command('admin'))
async def admin_login(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    print(f"Admin command received from user {message.from_user.id}")  # –û—Ç–ª–∞–¥–∫–∞
    await message.answer(
        "üîê **–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:\n\n"
        f"*–ü–æ–¥—Å–∫–∞–∑–∫–∞: —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å - {ADMIN_PASSWORD}*",  # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        parse_mode="Markdown"
    )
    await state.set_state(AdminAuth.waiting_password)
    print("State set to waiting_password")  # –û—Ç–ª–∞–¥–∫–∞

@router.message(AdminAuth.waiting_password)
async def admin_password_check(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    print(f"Password check: received '{message.text}', expected '{ADMIN_PASSWORD}'")  # –û—Ç–ª–∞–¥–∫–∞
    
    if message.text.strip() == ADMIN_PASSWORD:
        await state.clear()
        print("Password correct, showing admin panel")  # –û—Ç–ª–∞–¥–∫–∞
        await show_admin_panel(message)
    else:
        await state.clear()
        print("Password incorrect")  # –û—Ç–ª–∞–¥–∫–∞
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!**\n\n"
            f"–í—ã –≤–≤–µ–ª–∏: `{message.text}`\n"
            f"–û–∂–∏–¥–∞–ª—Å—è: `{ADMIN_PASSWORD}`\n\n"
            "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.",
            parse_mode="Markdown"
        )

async def show_admin_panel(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    admin_text = (
        "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å FLL Bot**\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    try:
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(
                admin_text,
                reply_markup=get_admin_keyboard(),
                parse_mode="Markdown"
            )
        else:  # CallbackQuery
            await message_or_callback.message.edit_text(
                admin_text,
                reply_markup=get_admin_keyboard(),
                parse_mode="Markdown"
            )
        print("Admin panel shown successfully")  # –û—Ç–ª–∞–¥–∫–∞
    except Exception as e:
        print(f"Error showing admin panel: {e}")  # –û—Ç–ª–∞–¥–∫–∞

@router.callback_query(F.data == "admin_back")
async def admin_back_to_panel(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await show_admin_panel(callback)
    await callback.answer()

@router.callback_query(F.data == "admin_refresh")
async def admin_refresh_panel(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await show_admin_panel(callback)
    await callback.answer("üîÑ –ü–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

@router.callback_query(F.data == "admin_stats")
async def admin_show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        async with async_session() as session:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_result = await session.execute("SELECT COUNT(*) FROM users")
            users_count = users_result.scalar()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
            teams_result = await session.execute("SELECT COUNT(*) FROM user_teams")
            teams_count = teams_result.scalar()
            
        stats_text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
            f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{users_count}**\n"
            f"üë• –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: **{teams_count}**\n"
        )
            
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_to_admin_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "admin_teams")
async def admin_show_teams(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"""
    try:
        async with async_session() as session:
            result = await session.execute(
                "SELECT team, city, number FROM user_teams ORDER BY id DESC LIMIT 10"
            )
            teams = result.fetchall()
            
        if teams:
            teams_text = "üë• **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):**\n\n"
            for i, (team, city, number) in enumerate(teams, 1):
                teams_text += f"**{i}.** {team}\nüìç {city} | üî¢ #{number}\n\n"
        else:
            teams_text = "üë• **–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è."
            
        await callback.message.edit_text(
            teams_text,
            reply_markup=get_back_to_admin_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "admin_close")
async def admin_close_panel(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await callback.message.edit_text(
        "üîí **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞**\n\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin",
        parse_mode="Markdown"
    )
    await callback.answer("–ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")

# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞
@router.message(Command('test_admin'))
async def test_admin_router(message: Message):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω-—Ä–æ—É—Ç–µ—Ä–∞"""
    await message.answer("‚úÖ –ê–¥–º–∏–Ω-—Ä–æ—É—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")
