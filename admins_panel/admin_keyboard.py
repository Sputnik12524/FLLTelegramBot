from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from database.models import User, UserTeams
from database.engine import async_session_factory
import os
from sqlalchemy.ext.asyncio import AsyncSession
from scheduler import get_reminder_scheduler

# –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "48)a$7yHRI6BM%_l5R(s")

class AdminAuth(StatesGroup):
    waiting_password = State()

class AdminBroadcast(StatesGroup):
    waiting_message = State()

router = Router()

def get_admin_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="admin_teams")],
        [InlineKeyboardButton(text="üèÜ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤", callback_data="admin_records")],
        [InlineKeyboardButton(text="üì∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏", callback_data="admin_reminders")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="admin_clear")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å", callback_data="admin_close")]
    ])

def get_admin_record_review_keyboard(record_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_record_{record_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_record_{record_id}")
        ],
        [InlineKeyboardButton(text="üí¨ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"request_info_{record_id}")],
        [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏ —Ä–µ–∫–æ—Ä–¥–∞", callback_data=f"record_details_{record_id}")]
    ])
    return keyboard

def get_back_to_admin_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_back")]
    ])

def get_records_filter_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ—Ä–¥–æ–≤"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", callback_data="admin_records_pending")],
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ", callback_data="admin_records_approved")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ", callback_data="admin_records_rejected")],
        [InlineKeyboardButton(text="üìã –í—Å–µ —Ä–µ–∫–æ—Ä–¥—ã", callback_data="admin_records_all")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_back")]
    ])

@router.callback_query(F.data == "admin_records")
async def show_admin_records_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∫–æ—Ä–¥–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with async_session_factory() as session:
        from database.models import SubmittedRecord
        from sqlalchemy import select, func
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ—Ä–¥—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending_result = await session.execute(
            select(func.count(SubmittedRecord.id)).where(SubmittedRecord.status == "pending")
        )
        pending_count = pending_result.scalar() or 0
        
        approved_result = await session.execute(
            select(func.count(SubmittedRecord.id)).where(SubmittedRecord.status == "approved")
        )
        approved_count = approved_result.scalar() or 0
        
        rejected_result = await session.execute(
            select(func.count(SubmittedRecord.id)).where(SubmittedRecord.status == "rejected")
        )
        rejected_count = rejected_result.scalar() or 0
        
        total_result = await session.execute(select(func.count(SubmittedRecord.id)))
        total_count = total_result.scalar() or 0
    
    records_text = (
        "üèÜ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ö–û–†–î–ê–ú–ò**\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤:**\n"
        f"‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: **{pending_count}**\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ: **{approved_count}**\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ: **{rejected_count}**\n"
        f"üìã –í—Å–µ–≥–æ: **{total_count}**\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    )
    
    await callback.message.edit_text(
        records_text,
        reply_markup=get_records_filter_keyboard()
    )

@router.callback_query(F.data == "admin_records_pending")
async def show_pending_records(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ—Ä–¥—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"""
    async with async_session_factory() as session:
        from database.models import SubmittedRecord
        from sqlalchemy import select
        
        result = await session.execute(
            select(SubmittedRecord).where(SubmittedRecord.status == "pending")
        )
        pending_records = result.scalars().all()
    
    if not pending_records:
        await callback.message.edit_text(
            "‚è≥ **–†–ï–ö–û–†–î–´ –ù–ê –ü–†–û–í–ï–†–ö–ï**\n\n"
            "üì≠ –ù–µ—Ç —Ä–µ–∫–æ—Ä–¥–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            reply_markup=get_back_to_admin_keyboard()
        )
        return
    
    records_text = (
        "‚è≥ **–†–ï–ö–û–†–î–´ –ù–ê –ü–†–û–í–ï–†–ö–ï**\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    )
    
    for i, record in enumerate(pending_records[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        records_text += (
            f"**{i}. {record.first_name}** - {record.score} –æ—á–∫–æ–≤\n"
            f"   üìÖ {record.date} | ‚è∞ {record.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"   üÜî `{record.record_id}`\n\n"
        )
    
    if len(pending_records) > 5:
        records_text += f"... –∏ –µ—â–µ {len(pending_records) - 5} —Ä–µ–∫–æ—Ä–¥–æ–≤\n\n"
    
    records_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ID —Ä–µ–∫–æ—Ä–¥–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
    
    await callback.message.edit_text(
        records_text,
        reply_markup=get_back_to_admin_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(Command('admin'))
async def admin_login(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    print(f"Admin command received from user {message.from_user.id}")  # –û—Ç–ª–∞–¥–∫–∞
    await message.answer(
        "üîê **–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:\n\n",
        parse_mode="Markdown"
    )
    await state.set_state(AdminAuth.waiting_password)
    print("State set to waiting_password")  # –û—Ç–ª–∞–¥–∫–∞

@router.message(AdminAuth.waiting_password)
async def admin_password_check(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    print(f"Password check: received '{message.text}', expected '{ADMIN_PASSWORD}'")  # –û—Ç–ª–∞–¥–∫–∞
    
    if message.text.strip() == ADMIN_PASSWORD:
        await state.clear()
        print("Password correct, showing admin panel")  # –û—Ç–ª–∞–¥–∫–∞
        await show_admin_panel(message)
    else:
        await state.clear()
        print("Password incorrect")  # –û—Ç–ª–∞–¥–∫–∞
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!**\n\n"
            f"–í—ã –≤–≤–µ–ª–∏: `{message.text}`\n"
            f"–û–∂–∏–¥–∞–ª—Å—è: `{ADMIN_PASSWORD}`\n\n"
            "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.",
            parse_mode="Markdown"
        )

async def show_admin_panel(message_or_callback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    admin_text = (
        "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å FLL Bot**\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    try:
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(
                admin_text,
                reply_markup=get_admin_keyboard(),
                parse_mode="Markdown"
            )
        else:  # CallbackQuery
            await message_or_callback.message.edit_text(
                admin_text,
                reply_markup=get_admin_keyboard(),
                parse_mode="Markdown"
            )
        print("Admin panel shown successfully")  # –û—Ç–ª–∞–¥–∫–∞
    except Exception as e:
        print(f"Error showing admin panel: {e}")  # –û—Ç–ª–∞–¥–∫–∞

@router.callback_query(F.data == "admin_back")
async def admin_back_to_panel(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await show_admin_panel(callback)
    await callback.answer()

@router.callback_query(F.data == "admin_refresh")
async def admin_refresh_panel(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await show_admin_panel(callback)
    await callback.answer("üîÑ –ü–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

@router.callback_query(F.data == "admin_stats")
async def admin_show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        async with async_session_factory() as session:
            from sqlalchemy import select, func
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_result = await session.execute(select(func.count(User.id)))
            users_count = users_result.scalar()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
            teams_result = await session.execute(select(func.count(UserTeams.id)))
            teams_count = teams_result.scalar()
            
        stats_text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
            f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{users_count}**\n"
            f"üë• –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: **{teams_count}**\n"
        )
            
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_back_to_admin_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "admin_teams")
async def admin_show_teams(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"""
    try:
        async with async_session_factory() as session:
            from sqlalchemy import select
            
            result = await session.execute(
                select(UserTeams.team, UserTeams.city, UserTeams.number)
                .order_by(UserTeams.id.desc())
                .limit(10)
            )
            teams = result.all()
            
        if teams:
            teams_text = "üë• **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):**\n\n"
            for i, (team, city, number) in enumerate(teams, 1):
                teams_text += f"**{i}.** {team}\nüìç {city} | üî¢ #{number}\n\n"
        else:
            teams_text = "üë• **–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è."
            
        await callback.message.edit_text(
            teams_text,
            reply_markup=get_back_to_admin_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "admin_close")
async def admin_close_panel(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await callback.message.edit_text(
        "üîí **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞**\n\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin",
        parse_mode="Markdown"
    )
    await callback.answer("–ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")

# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞
@router.message(Command('test_admin'))
async def test_admin_router(message: Message):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω-—Ä–æ—É—Ç–µ—Ä–∞"""
    await message.answer("‚úÖ –ê–¥–º–∏–Ω-—Ä–æ—É—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")

def get_admin_record_review_keyboard(record_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_record_{record_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_record_{record_id}")
        ],
        [InlineKeyboardButton(text="üí¨ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"request_info_{record_id}")],
        [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏ —Ä–µ–∫–æ—Ä–¥–∞", callback_data=f"record_details_{record_id}")]
    ])
    return keyboard

def get_record_status_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", callback_data="records_pending")],
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ", callback_data="records_approved")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ", callback_data="records_rejected")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_records")]
    ])
    return keyboard

def get_cancel_keyboard():
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

def get_confirmation_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_submit"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_submit")
        ]
    ])
    return keyboard

def remove_keyboard():
    """–£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    from aiogram.types import ReplyKeyboardRemove
    return ReplyKeyboardRemove()

def get_reminders_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="reminders_status")],
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º", callback_data="reminders_send_all")],
        [InlineKeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="reminders_send_user")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin_back")]
    ])

class AdminReminder(StatesGroup):
    waiting_user_id = State()

@router.callback_query(F.data == "admin_reminders")
async def admin_show_reminders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    scheduler = get_reminder_scheduler()
    
    if scheduler is None:
        await callback.message.edit_text(
            "‚ùå **–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω**\n\n"
            "–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.",
            reply_markup=get_back_to_admin_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    reminders_text = (
        "üì∏ **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø–ú–ò**\n\n"
        "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏—Å—ã–ª–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:\n\n"
        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ä–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ —Ç–∞–π–º–µ—Ä —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        reminders_text,
        reply_markup=get_reminders_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "reminders_status")
async def show_reminders_status(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        scheduler = get_reminder_scheduler()
        
        if scheduler is None:
            await callback.answer("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return
        
        status_list = await scheduler.get_users_reminder_status()
        
        if not status_list:
            await callback.message.edit_text(
                "üìä **–°–¢–ê–¢–£–° –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô**\n\n"
                "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                reply_markup=get_back_to_admin_keyboard(),
                parse_mode="Markdown"
            )
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = len(status_list)
        need_reminder = sum(1 for user in status_list if user['needs_reminder'])
        have_reminder = total_users - need_reminder
        
        status_text = (
            "üìä **–°–¢–ê–¢–£–° –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô**\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**\n"
            f"üîî –ù—É–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: **{need_reminder}**\n"
            f"‚úÖ –ü–æ–ª—É—á–∞–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ: **{have_reminder}**\n\n"
        )
        
        if need_reminder > 0:
            status_text += "üîî **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω—É–∂–¥–∞—é—â–∏–µ—Å—è –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏:**\n"
            for user in status_list[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                if user['needs_reminder']:
                    if user['last_reminder']:
                        from datetime import datetime
                        last_date = user['last_reminder'].strftime('%d.%m.%Y')
                        status_text += f"‚Ä¢ ID {user['tg_id']} (–ø–æ—Å–ª–µ–¥–Ω–µ–µ: {last_date})\n"
                    else:
                        status_text += f"‚Ä¢ ID {user['tg_id']} (–Ω–∏–∫–æ–≥–¥–∞)\n"
            
            if need_reminder > 10:
                status_text += f"... –∏ –µ—â–µ {need_reminder - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        
        await callback.message.edit_text(
            status_text,
            reply_markup=get_back_to_admin_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "reminders_send_all")
async def send_reminders_to_all(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ"""
    try:
        scheduler = get_reminder_scheduler()
        
        if scheduler is None:
            await callback.answer("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await scheduler._check_and_send_reminders()
        
        await callback.message.edit_text(
            "‚úÖ **–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –û–¢–ü–†–ê–í–õ–ï–ù–´**\n\n"
            "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            reply_markup=get_back_to_admin_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "reminders_send_user")
async def send_reminder_to_user_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await callback.message.edit_text(
        "üì± **–û–¢–ü–†–ê–í–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789",
        parse_mode="Markdown"
    )
    await state.set_state(AdminReminder.waiting_user_id)
    await callback.answer()

@router.message(AdminReminder.waiting_user_id)
async def send_reminder_to_user_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    try:
        user_id = int(message.text.strip())
        
        scheduler = get_reminder_scheduler()
        if scheduler is None:
            await message.answer("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            await state.clear()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        success = await scheduler.force_reminder_for_user(user_id)
        
        if success:
            await message.answer(
                f"‚úÖ **–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û**\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–∞–Ω–µ–ª–∏.",
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                f"‚ùå **–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò**\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞\n"
                "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π ID\n"
                "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–∞–Ω–µ–ª–∏.",
                parse_mode="Markdown"
            )
        
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå **–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢**\n\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="Markdown"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()
