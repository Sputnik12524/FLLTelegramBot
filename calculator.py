from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import pandas as pd
from io import BytesIO
from datetime import datetime
import json


class FLLCalculator:
    def __init__(self):
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º —Å–µ–∑–æ–Ω–∞ (–∏—Ç–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 700)
        self.global_max_total = 700
        self.missions = {
            "mission_1": {"name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", "max_points": 40},
            "mission_2": {"name": "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", "max_points": 30},
            "mission_3": {"name": "–°–≤–µ—Ç–æ—Ñ–æ—Ä", "max_points": 30},
            "mission_4": {"name": "–ù–∞–¥–∑–µ–º–Ω—ã–π –ø–µ—à–µ—Ö–æ–¥–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥", "max_points": 30},
            "mission_5": {"name": "–Ø–º–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç", "max_points": 25},
            "mission_6": {"name": "–°–∞–º–æ–∫–∞—Ç—ã", "max_points": 20},
            "mission_7": {"name": "–ü–∞—Ä–∫–æ–≤–∫–∞ —Å–∞–º–æ–∫–∞—Ç–æ–≤", "max_points": 80},
            "mission_8": {"name": "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥", "max_points": 45},
            "mission_9": {"name": "–õ–µ–∂–∞—á–∏–π –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–π", "max_points": 25},
            "mission_10": {"name": "–≠–≤–∞–∫—É–∞—Ç–æ—Ä", "max_points": 50},
            "mission_11": {"name": "–î–æ—Ä–æ–∂–Ω–æ–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏–µ", "max_points": 25},
            "mission_12": {"name": "–ê–≤—Ç–æ–±—É—Å", "max_points": 30},
            "mission_13": {"name": '–ó–Ω–∞–∫"–°–¢–û–ü!"', "max_points": 35},
            "mission_14": {"name": "–ê–≤—Ç–æ–±—É—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞", "max_points": 40},
            "mission_15": {"name": "–ü–∞—Ä–∫–æ–≤–∫–∞", "max_points": 50},
            "mission_16": {"name": "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", "max_points": 40},
            "mission_17": {"name": "–ñ–µ—Ç–æ–Ω—ã —Ç–æ—á–Ω–æ—Å—Ç–∏", "max_points": 60},
        }
        # –ù–∞–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–∏—Å—Å–∏–π.
        # –ü—Ä–∏–º–µ—Ä: –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 0/30/40
        # –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–∏—Å—Å–∏–∏, –¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞: "mission_X": [—Å–ø–∏—Å–æ–∫ –±–∞–ª–ª–æ–≤]
        self.mission_point_presets = {
            "mission_1": [0, 30, 40],
            "mission_2": [0, 20, 30],
            "mission_3": [0, 15, 30],
            "mission_4": [0, 20, 30],
            "mission_5": [0, 25],
            "mission_8": [0, 25, 45],
            "mission_9": [0, 25],
            "mission_10": [0, 10, 50],
            "mission_11": [0, 25],
            "mission_12": [0, 10, 30],
            "mission_13": [0, 35],
            "mission_14": [0, 20, 40],
            "mission_15": [0, 20, 30, 50],
            "mission_16": [0, 40],
            "mission_17": [0, 15, 25, 35, 35, 60],
        }
        # –ü—Ä–∞–≤–∏–ª–∞ –º–∏—Å—Å–∏–π, –≥–¥–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å/–≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –±–∞–ª–ª—ã —á–µ—Ä–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, –ø—Ä–∏ —ç—Ç–æ–º
        # –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ callback —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —á–∏—Å–ª–æ–º –±–∞–ª–ª–æ–≤.
        self.count_mission_rules = {
            # –°–∞–º–æ–∫–∞—Ç—ã: 10 –±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π; –º–∞–∫—Å–∏–º—É–º 2 —à—Ç = 20 –±–∞–ª–ª–æ–≤
            "mission_6": {"points_per_unit": 10, "max_units": 2, "unit_label": "—à—Ç"},
            # –ü–∞—Ä–∫–æ–≤–∫–∞ —Å–∞–º–æ–∫–∞—Ç–æ–≤: 20 –±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π; –º–∞–∫—Å–∏–º—É–º 4 —à—Ç = 80 –±–∞–ª–ª–æ–≤
            "mission_7": {"points_per_unit": 20, "max_units": 4, "unit_label": "—à—Ç"},
        }
        self.user_scores = {}
    
    def get_main_keyboard(self, user_id=None):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        buttons = []
        
        for mission_id, mission_data in self.missions.items():
            current_score = self.get_mission_score(user_id, mission_id) if user_id else 0
            button = InlineKeyboardButton(
                text=f"{mission_data['name']} ({current_score}/{mission_data['max_points']})",
                callback_data=f"calc_{mission_id}"
            )
            buttons.append([button])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        total_score = self.get_total_score(user_id) if user_id else 0
        max_total = self.get_max_possible_score()
        
        control_buttons = [
            InlineKeyboardButton(text=f"üìä –ò—Ç–æ–≥–æ: {total_score}/{max_total}", callback_data="calc_total"),
            InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="calc_reset")
        ]
        buttons.append(control_buttons)
        
        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        save_results_button = [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="calc_save")]
        my_results_button = [InlineKeyboardButton(text="üìã –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="calc_my_results")]
        buttons.append(save_results_button)
        buttons.append(my_results_button)
        
        # –ò–∑–º–µ–Ω—è–µ–º callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        back_button = [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_pt")]
        buttons.append(back_button)
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def get_mission_keyboard(self, mission_id):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∏—Å—Å–∏–∏"""
        if mission_id not in self.missions:
            return None
            
        mission = self.missions[mission_id]
        max_points = mission["max_points"]
        
        buttons = []
        current_row = []
        
        # 1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ—Å–µ—Ç—ã –±–∞–ª–ª–æ–≤ ‚Äî –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if mission_id in self.mission_point_presets:
            for points in self.mission_point_presets[mission_id]:
                # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –º–∞–∫—Å–∏–º—É–º –º–∏—Å—Å–∏–∏
                safe_points = min(points, max_points)
                button = InlineKeyboardButton(
                    text=str(points),
                    callback_data=f"calc_set_{mission_id}_{safe_points}"
                )
                current_row.append(button)
                if len(current_row) == 3:  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤
                    buttons.append(current_row)
                    current_row = []
        # 2) –û—Å–æ–±—ã–µ –º–∏—Å—Å–∏–∏: –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–ª–ª—ã)
        elif mission_id in self.count_mission_rules:
            rule = self.count_mission_rules[mission_id]
            ppu = rule["points_per_unit"]
            max_units = rule["max_units"]
            unit_label = rule.get("unit_label", "—à—Ç")

            for count in range(0, max_units + 1):
                points = count * ppu
                button = InlineKeyboardButton(
                    text=f"{count} {unit_label} ({points})",
                    callback_data=f"calc_set_{mission_id}_{points}"
                )
                current_row.append(button)
                if len(current_row) == 3:  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
                    buttons.append(current_row)
                    current_row = []
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ—á–∫–∞–º–∏ (–ø–æ 5 –æ—á–∫–æ–≤)
            for points in range(0, max_points + 1, 5):
                if points <= max_points:
                    button = InlineKeyboardButton(
                        text=str(points),
                        callback_data=f"calc_set_{mission_id}_{points}"
                    )
                    current_row.append(button)
                    
                    if len(current_row) == 4:  # 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                        buttons.append(current_row)
                        current_row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        if current_row:
            buttons.append(current_row)
        
        if mission_id not in self.count_mission_rules and mission_id not in self.mission_point_presets:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–∏—Å—Å–∏–π)
            if max_points % 5 != 0:
                max_button = InlineKeyboardButton(
                    text=str(max_points),
                    callback_data=f"calc_set_{mission_id}_{max_points}"
                )
                buttons.append([max_button])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        back_button = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∏—Å—Å–∏—è–º", callback_data="calc_back")
        buttons.append([back_button])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def get_save_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        buttons = [
            [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="calc_save_simple")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É", callback_data="calc_back")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    

    
    def get_results_keyboard(self, results):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á—ë—Ç–∞
        if results:
            report_button = [InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç", callback_data="calc_view_report")]
            buttons.append(report_button)
        
        for result in results:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–∑ –¥–∞—Ç—ã
            if result.name:
                name = result.name
            else:
                name = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç {result.created_at.strftime('%d.%m.%Y –≤ %H:%M')}"
            
            button_text = f"{name} ({result.total_score}/{result.max_possible_score})"
            button = InlineKeyboardButton(
                text=button_text,
                callback_data=f"calc_view_result_{result.id}"
            )
            buttons.append([button])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        back_button = [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É", callback_data="calc_back")]
        buttons.append(back_button)
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def get_report_choice_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞"""
        buttons = [
            [InlineKeyboardButton(text="üìã –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç", callback_data="calc_brief_report")],
            [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç (Excel)", callback_data="calc_detailed_report")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="calc_my_results")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def get_report_period_keyboard(self, report_type):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á—ë—Ç–∞"""
        buttons = [
            [InlineKeyboardButton(text="üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data=f"calc_{report_type}_week")],
            [InlineKeyboardButton(text="üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data=f"calc_{report_type}_month")],
            [InlineKeyboardButton(text="üìÖ –ó–∞ –ø–æ–ª–≥–æ–¥–∞", callback_data=f"calc_{report_type}_half_year")],
            [InlineKeyboardButton(text="üìÖ –ó–∞ –≥–æ–¥", callback_data=f"calc_{report_type}_year")],
            [InlineKeyboardButton(text="üìÖ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data=f"calc_{report_type}_all")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç—á—ë—Ç–∞", callback_data="calc_view_report")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def get_result_detail_keyboard(self, result_id):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        buttons = [
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data=f"calc_delete_result_{result_id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="calc_my_results")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def set_mission_score(self, user_id, mission_id, score):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—á–∫–∏ –∑–∞ –º–∏—Å—Å–∏—é"""
        if not user_id or mission_id not in self.missions:
            return False
            
        if user_id not in self.user_scores:
            self.user_scores[user_id] = {}
        
        max_points = self.missions[mission_id]["max_points"]
        if 0 <= score <= max_points:
            self.user_scores[user_id][mission_id] = score
            return True
        return False
    
    def get_mission_score(self, user_id, mission_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—á–∫–∏ –∑–∞ –º–∏—Å—Å–∏—é"""
        if (user_id and 
            user_id in self.user_scores and 
            mission_id in self.user_scores[user_id]):
            return self.user_scores[user_id][mission_id]
        return 0
    
    def get_total_score(self, user_id):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π —Å—á–µ—Ç"""
        if not user_id or user_id not in self.user_scores:
            return 0
        return sum(self.user_scores[user_id].values())
    
    def reset_scores(self, user_id):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id and user_id in self.user_scores:
            self.user_scores[user_id] = {}
    
    def get_score_breakdown(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É –æ—á–∫–æ–≤"""
        if not user_id or user_id not in self.user_scores:
            breakdown = "üèÜ **–î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –æ—á–∫–æ–≤:**\n\n"
            for mission_id, mission_data in self.missions.items():
                breakdown += f"‚≠ï {mission_data['name']}: 0/{mission_data['max_points']}\n"
            
            max_total = self.get_max_possible_score()
            breakdown += f"\nüéØ **–û–±—â–∏–π —Å—á–µ—Ç: 0/{max_total}**"
            breakdown += f"\nüìà **–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 0.0%**"
            return breakdown
        
        breakdown = "üèÜ **–î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –æ—á–∫–æ–≤:**\n\n"
        total = 0
        
        for mission_id, mission_data in self.missions.items():
            score = self.get_mission_score(user_id, mission_id)
            total += score
            status = "‚úÖ" if score > 0 else "‚≠ï"
            breakdown += f"{status} {mission_data['name']}: {score}/{mission_data['max_points']}\n"
        
        max_total = self.get_max_possible_score()
        breakdown += f"\nüéØ **–û–±—â–∏–π —Å—á–µ—Ç: {total}/{max_total}**"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        percentage = (total / max_total) * 100 if max_total > 0 else 0
        breakdown += f"\nüìà **–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {percentage:.1f}%**"
        
        return breakdown
    
    def get_user_scores_dict(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –æ—á–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        if not user_id or user_id not in self.user_scores:
            return {}
        return self.user_scores[user_id].copy()
    
    def get_max_possible_score(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—á–µ—Ç"""
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º —Å–µ–∑–æ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if getattr(self, "global_max_total", None):
            return self.global_max_total
        return sum(mission["max_points"] for mission in self.missions.values())
    
    def generate_brief_report(self, results):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞"""
        if not results:
            return "üìã **–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç**\n\n–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç—á—ë—Ç–∞."
        
        report = "üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}\n"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_scores = [r.total_score for r in results]
        avg_score = sum(total_scores) / len(total_scores) if total_scores else 0
        max_score = max(total_scores) if total_scores else 0
        min_score = min(total_scores) if total_scores else 0
        
        report += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}\n"
        report += f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {max_score}\n"
        report += f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª: {min_score}\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if len(results) > 1:
            first_result = results[-1]  # –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            last_result = results[0]    # –°–∞–º—ã–π –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
            progress = last_result.total_score - first_result.total_score
            progress_text = "üìà" if progress > 0 else "üìâ" if progress < 0 else "‚û°Ô∏è"
            report += f"{progress_text} **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress:+d} –±–∞–ª–ª–æ–≤\n\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        recent_results = results[:5]
        report += f"üìÖ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n"
        for i, result in enumerate(recent_results, 1):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É ISO, —Ç–∞–∫ –∏ –æ–±—ä–µ–∫—Ç datetime
            if hasattr(result.created_at, 'strftime'):
                date_str = result.created_at.strftime('%d.%m.%Y')
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ ISO, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime
                from datetime import datetime
                created_at = datetime.fromisoformat(result.created_at)
                date_str = created_at.strftime('%d.%m.%Y')
            
            percentage = (result.total_score / result.max_possible_score * 100) if result.max_possible_score > 0 else 0
            report += f"{i}. {date_str}: {result.total_score}/{result.max_possible_score} ({percentage:.1f}%)\n"
        
        return report
    
    def generate_detailed_excel_report(self, results):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel"""
        if not results:
            return None
        
        # –°–æ–∑–¥–∞—ë–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output = BytesIO()
        
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            # –õ–∏—Å—Ç 1: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_data = []
            for result in results:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É ISO, —Ç–∞–∫ –∏ –æ–±—ä–µ–∫—Ç datetime
                if hasattr(result.created_at, 'strftime'):
                    date_str = result.created_at.strftime('%d.%m.%Y %H:%M')
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ ISO, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime
                    from datetime import datetime
                    created_at = datetime.fromisoformat(result.created_at)
                    date_str = created_at.strftime('%d.%m.%Y %H:%M')
                
                percentage = (result.total_score / result.max_possible_score * 100) if result.max_possible_score > 0 else 0
                stats_data.append({
                    '–î–∞—Ç–∞': date_str,
                    '–û–±—â–∏–π –±–∞–ª–ª': result.total_score,
                    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª': result.max_possible_score,
                    '–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': f"{percentage:.1f}%",
                    '–ù–∞–∑–≤–∞–Ω–∏–µ': result.name or f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç {date_str}"
                })
            
            stats_df = pd.DataFrame(stats_data)
            stats_df.to_excel(writer, sheet_name='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º (–ª–∏—Å—Ç '–°–≤–æ–¥–∫–∞')
            if results:
                summary_rows = []
                for result in results:
                    # –î–∞—Ç–∞
                    if hasattr(result.created_at, 'strftime'):
                        date_str = result.created_at.strftime('%d.%m.%Y %H:%M')
                    else:
                        from datetime import datetime
                        created_at = datetime.fromisoformat(result.created_at)
                        date_str = created_at.strftime('%d.%m.%Y %H:%M')
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π
                    done_missions = [
                        self.missions.get(m_id, {}).get('name', m_id)
                        for m_id, score in result.mission_scores.items() if score > 0
                    ]
                    num_done = len(done_missions)
                    done_str = ', '.join(done_missions) if done_missions else '-'
                    percentage = (result.total_score / result.max_possible_score * 100) if result.max_possible_score > 0 else 0
                    summary_rows.append({
                        '–î–∞—Ç–∞': date_str,
                        '–û–±—â–∏–π –±–∞–ª–ª': result.total_score,
                        '–í—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏—Å—Å–∏–π': num_done,
                        '–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π': done_str,
                        '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª': result.max_possible_score,
                        '–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': f"{percentage:.1f}%"
                    })
                summary_df = pd.DataFrame(summary_rows)
                summary_df.to_excel(writer, sheet_name='–°–≤–æ–¥–∫–∞', index=False)
            
            # –õ–∏—Å—Ç 2: –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –º–∏—Å—Å–∏—è–º
            missions_data = []
            for result in results:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É ISO, —Ç–∞–∫ –∏ –æ–±—ä–µ–∫—Ç datetime
                if hasattr(result.created_at, 'strftime'):
                    date_str = result.created_at.strftime('%d.%m.%Y %H:%M')
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ ISO, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime
                    from datetime import datetime
                    created_at = datetime.fromisoformat(result.created_at)
                    date_str = created_at.strftime('%d.%m.%Y %H:%M')
                
                for mission_id, score in result.mission_scores.items():
                    mission_name = self.missions.get(mission_id, {}).get('name', mission_id)
                    max_points = self.missions.get(mission_id, {}).get('max_points', 0)
                    missions_data.append({
                        '–î–∞—Ç–∞': date_str,
                        '–ú–∏—Å—Å–∏—è': mission_name,
                        '–ë–∞–ª–ª': score,
                        '–ú–∞–∫—Å–∏–º—É–º': max_points,
                        '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{(score / max_points * 100):.1f}%" if max_points > 0 else "0%"
                    })
            
            missions_df = pd.DataFrame(missions_data)
            missions_df.to_excel(writer, sheet_name='–†–∞–∑–±–∏–≤–∫–∞ –ø–æ –º–∏—Å—Å–∏—è–º', index=False)
            
            # –õ–∏—Å—Ç 3: –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –º–∏—Å—Å–∏—è–º
            pivot_data = []
            for mission_id, mission_data in self.missions.items():
                mission_name = mission_data['name']
                max_points = mission_data['max_points']
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–∞–ª–ª—ã –∑–∞ —ç—Ç—É –º–∏—Å—Å–∏—é
                mission_scores = []
                for result in results:
                    if mission_id in result.mission_scores:
                        mission_scores.append(result.mission_scores[mission_id])
                
                if mission_scores:
                    avg_score = sum(mission_scores) / len(mission_scores)
                    max_score = max(mission_scores)
                    min_score = min(mission_scores)
                else:
                    avg_score = max_score = min_score = 0
                
                pivot_data.append({
                    '–ú–∏—Å—Å–∏—è': mission_name,
                    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª': max_points,
                    '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª': f"{avg_score:.1f}",
                    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π': max_score,
                    '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π': min_score,
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫': len(mission_scores)
                })
            
            pivot_df = pd.DataFrame(pivot_data)
            pivot_df.to_excel(writer, sheet_name='–°–≤–æ–¥–∫–∞ –ø–æ –º–∏—Å—Å–∏—è–º', index=False)
        
        output.seek(0)
        return output

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
fll_calculator = FLLCalculator()
