from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


class FLLCalculator:
    def __init__(self):
        self.missions = {
            "mission_1": {"name": "–¢–æ—á–Ω–æ—Å—Ç—å", "max_points": 20},
            "mission_2": {"name": "–°–±–æ—Ä —É—Ä–æ–∂–∞—è", "max_points": 30},
            "mission_3": {"name": "–î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "max_points": 25},
            "mission_4": {"name": "–ñ–∏–≤–æ—Ç–Ω—ã–µ –Ω–∞ —Ñ–µ—Ä–º–µ", "max_points": 20},
            "mission_5": {"name": "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ö–æ–¥–æ–≤", "max_points": 15},
            "mission_6": {"name": "–°–æ–ª–Ω–µ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", "max_points": 20},
            "mission_7": {"name": "–í–æ–¥–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã", "max_points": 25},
            "mission_8": {"name": "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", "max_points": 30},
            "mission_9": {"name": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "max_points": 15},
            "mission_10": {"name": "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "max_points": 20},
        }
        self.user_scores = {}
    
    def get_main_keyboard(self, user_id=None):
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        buttons = []
        
        for mission_id, mission_data in self.missions.items():
            current_score = self.get_mission_score(user_id, mission_id) if user_id else 0
            button = InlineKeyboardButton(
                text=f"{mission_data['name']} ({current_score}/{mission_data['max_points']})",
                callback_data=f"calc_{mission_id}"
            )
            buttons.append([button])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        total_score = self.get_total_score(user_id) if user_id else 0
        max_total = sum(mission["max_points"] for mission in self.missions.values())
        
        control_buttons = [
            InlineKeyboardButton(text=f"üìä –ò—Ç–æ–≥–æ: {total_score}/{max_total}", callback_data="calc_total"),
            InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="calc_reset")
        ]
        buttons.append(control_buttons)
        
        # –ò–∑–º–µ–Ω—è–µ–º callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        back_button = [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="calc_back_to_main")]
        buttons.append(back_button)
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def get_mission_keyboard(self, mission_id):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∏—Å—Å–∏–∏"""
        if mission_id not in self.missions:
            return None
            
        mission = self.missions[mission_id]
        max_points = mission["max_points"]
        
        buttons = []
        current_row = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ—á–∫–∞–º–∏ (–ø–æ 5 –æ—á–∫–æ–≤)
        for points in range(0, max_points + 1, 5):
            if points <= max_points:
                button = InlineKeyboardButton(
                    text=str(points),
                    callback_data=f"calc_set_{mission_id}_{points}"
                )
                current_row.append(button)
                
                if len(current_row) == 4:  # 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                    buttons.append(current_row)
                    current_row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        if current_row:
            buttons.append(current_row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
        if max_points % 5 != 0:
            max_button = InlineKeyboardButton(
                text=str(max_points),
                callback_data=f"calc_set_{mission_id}_{max_points}"
            )
            buttons.append([max_button])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        back_button = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∏—Å—Å–∏—è–º", callback_data="calc_back")
        buttons.append([back_button])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    def set_mission_score(self, user_id, mission_id, score):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—á–∫–∏ –∑–∞ –º–∏—Å—Å–∏—é"""
        if not user_id or mission_id not in self.missions:
            return False
            
        if user_id not in self.user_scores:
            self.user_scores[user_id] = {}
        
        max_points = self.missions[mission_id]["max_points"]
        if 0 <= score <= max_points:
            self.user_scores[user_id][mission_id] = score
            return True
        return False
    
    def get_mission_score(self, user_id, mission_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—á–∫–∏ –∑–∞ –º–∏—Å—Å–∏—é"""
        if (user_id and 
            user_id in self.user_scores and 
            mission_id in self.user_scores[user_id]):
            return self.user_scores[user_id][mission_id]
        return 0
    
    def get_total_score(self, user_id):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π —Å—á–µ—Ç"""
        if not user_id or user_id not in self.user_scores:
            return 0
        return sum(self.user_scores[user_id].values())
    
    def reset_scores(self, user_id):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id and user_id in self.user_scores:
            self.user_scores[user_id] = {}
    
    def get_score_breakdown(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É –æ—á–∫–æ–≤"""
        if not user_id or user_id not in self.user_scores:
            breakdown = "üèÜ **–î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –æ—á–∫–æ–≤:**\n\n"
            for mission_id, mission_data in self.missions.items():
                breakdown += f"‚≠ï {mission_data['name']}: 0/{mission_data['max_points']}\n"
            
            max_total = sum(mission["max_points"] for mission in self.missions.values())
            breakdown += f"\nüéØ **–û–±—â–∏–π —Å—á–µ—Ç: 0/{max_total}**"
            breakdown += f"\nüìà **–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 0.0%**"
            return breakdown
        
        breakdown = "üèÜ **–î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –æ—á–∫–æ–≤:**\n\n"
        total = 0
        
        for mission_id, mission_data in self.missions.items():
            score = self.get_mission_score(user_id, mission_id)
            total += score
            status = "‚úÖ" if score > 0 else "‚≠ï"
            breakdown += f"{status} {mission_data['name']}: {score}/{mission_data['max_points']}\n"
        
        max_total = sum(mission["max_points"] for mission in self.missions.values())
        breakdown += f"\nüéØ **–û–±—â–∏–π —Å—á–µ—Ç: {total}/{max_total}**"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        percentage = (total / max_total) * 100 if max_total > 0 else 0
        breakdown += f"\nüìà **–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {percentage:.1f}%**"
        
        return breakdown

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
fll_calculator = FLLCalculator()
