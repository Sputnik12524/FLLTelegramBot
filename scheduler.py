import asyncio
import logging
from datetime import datetime, timedelta
from typing import List
from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, exists, and_, or_
from database.models import User, Improvement
from database.engine import async_session_factory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ReminderScheduler:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.is_running = False
        self.reminder_task = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if self.is_running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.is_running = True
        self.reminder_task = asyncio.create_task(self._run_scheduler())
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if not self.is_running:
            return
            
        self.is_running = False
        if self.reminder_task:
            self.reminder_task.cancel()
            try:
                await self.reminder_task
            except asyncio.CancelledError:
                pass
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    async def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.is_running:
            try:
                await self._check_and_send_reminders()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                await asyncio.sleep(3600)  # 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç
                
    async def _check_and_send_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            async with async_session_factory() as session:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                users_to_remind = await self._get_users_needing_reminder(session)
                
                if not users_to_remind:
                    logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                    return
                    
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users_to_remind)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                for user in users_to_remind:
                    try:
                        await self._send_reminder(user.tg_id)
                        await self._update_reminder_time(session, user.tg_id)
                        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}: {e}")
                        
                await session.commit()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            
    async def _get_users_needing_reminder(self, session: AsyncSession) -> List[User]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        # –î–∞—Ç–∞ 2 –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥
        two_weeks_ago = datetime.now() - timedelta(weeks=2)
        
        # –£—Å–ª–æ–≤–∏–µ: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞
        has_any_improvement = exists(
            select(1).where(Improvement.user_tg_id == User.tg_id)
        )

        # –£—Å–ª–æ–≤–∏–µ: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è 2+ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥
        has_old_improvement = exists(
            select(1).where(
                and_(
                    Improvement.user_tg_id == User.tg_id,
                    Improvement.created_at <= two_weeks_ago
                )
            )
        )

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–ª –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –∏:
        #  - –ª–∏–±–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –µ—â—ë –Ω–µ –±—ã–ª–æ, –Ω–æ –ø–µ—Ä–≤–∞—è/–ø–æ—Å–ª–µ–¥–Ω—è—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –±—ã–ª–∞ 2+ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥
        #  - –ª–∏–±–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ 2+ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥
        query = select(User).where(
            and_(
                has_any_improvement,
                or_(
                    and_(User.last_photo_reminder.is_(None), has_old_improvement),
                    (User.last_photo_reminder <= two_weeks_ago)
                )
            )
        )
        
        result = await session.execute(query)
        return result.scalars().all()
        
    async def _send_reminder(self, user_tg_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        reminder_text = (
            "üì∏ –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞—é –æ –≤–∞–∂–Ω–æ–º!\n\n"
            "–£–∂–µ –ø—Ä–æ—à–ª–æ 2 –Ω–µ–¥–µ–ª–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. "
            "–ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é! üì∑\n\n"
            "–ü—Ä–∏—Å—ã–ª–∞–π —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–æ–±–æ—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å! üòä"
        )
        
        try:
            await self.bot.send_message(
                chat_id=user_tg_id,
                text=reminder_text
            )
        except Exception as e:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_tg_id}: {e}")
            
    async def _update_reminder_time(self, session: AsyncSession, user_tg_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await session.execute(
            update(User)
            .where(User.tg_id == user_tg_id)
            .values(last_photo_reminder=datetime.now())
        )
        
    async def force_reminder_for_user(self, user_tg_id: int):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            await self._send_reminder(user_tg_id)
            
            async with async_session_factory() as session:
                await self._update_reminder_time(session, user_tg_id)
                await session.commit()
                
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_tg_id}: {e}")
            return False
            
    async def get_users_reminder_status(self) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            async with async_session_factory() as session:
                query = select(User)
                result = await session.execute(query)
                users = result.scalars().all()
                
                status_list = []
                for user in users:
                    status = {
                        'tg_id': user.tg_id,
                        'last_reminder': user.last_photo_reminder,
                        'needs_reminder': self._user_needs_reminder(user.last_photo_reminder)
                    }
                    status_list.append(status)
                    
                return status_list
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return []
            
    def _user_needs_reminder(self, last_reminder: datetime = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        if last_reminder is None:
            return True
            
        two_weeks_ago = datetime.now() - timedelta(weeks=2)
        return last_reminder <= two_weeks_ago

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
reminder_scheduler: ReminderScheduler = None

def get_reminder_scheduler() -> ReminderScheduler:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    return reminder_scheduler

def init_reminder_scheduler(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    global reminder_scheduler
    reminder_scheduler = ReminderScheduler(bot)
    return reminder_scheduler