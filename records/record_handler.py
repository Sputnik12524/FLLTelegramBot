from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from keybords.keybord_client import kb_client
import re

from records.record_kb import (
    get_record_main_menu, get_record_submission_menu, get_date_input_keyboard,
    get_score_input_keyboard, get_video_upload_keyboard, get_admin_record_review_keyboard,
    get_record_status_keyboard, remove_keyboard, get_cancel_keyboard, get_confirmation_keyboard
)

router = Router()

class RecordSubmissionStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_score = State()
    waiting_for_video = State()
    confirming_submission = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–æ—Ä–¥–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_record_data = {}
submitted_records = []  # –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤

@router.callback_query(F.data == "records")
async def show_records_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–∫–æ—Ä–¥–æ–≤"""
    await callback.message.edit_text(
        "üèÜ **–ú–µ–Ω—é —Ä–µ–∫–æ—Ä–¥–æ–≤ FLL**\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–µ–∫–æ—Ä–¥–æ–≤ –õ–∏–≥–∏ –†–µ—à–µ–Ω–∏–π!\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–∫–æ—Ä–¥ –†–æ—Å—Å–∏–∏\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_record_main_menu()
    )

@router.callback_query(F.data == "submit_record")
async def start_record_submission(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞"""
    user_id = callback.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_record_data:
        user_record_data[user_id] = {}
    
    user_data = user_record_data[user_id]
    
    status_text = (
        "üì§ **–û–¢–ü–†–ê–í–ö–ê –†–ï–ö–û–†–î–ê –ù–ê –ü–†–û–í–ï–†–ö–£**\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "**–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:**\n"
        f"üìÖ –î–∞—Ç–∞: {'‚úÖ ' + user_data.get('date', '') if 'date' in user_data else '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üéØ –û—á–∫–∏: {'‚úÖ ' + str(user_data.get('score', '')) if 'score' in user_data else '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"üé• –í–∏–¥–µ–æ: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' if 'video' in user_data else '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "**–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:**\n"
        "üìÖ –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞\n"
        "üéØ –£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤\n"
        "üé• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        status_text,
        reply_markup=get_record_submission_menu()
    )

@router.callback_query(F.data == "set_record_date")
async def set_record_date(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Ä–µ–∫–æ—Ä–¥–∞"""
    await state.set_state(RecordSubmissionStates.waiting_for_date)
    
    await callback.message.edit_text(
        "üìÖ **–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
        "‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º"
    )
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=get_date_input_keyboard()
    )

@router.message(RecordSubmissionStates.waiting_for_date)
async def process_date_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã"""
    user_id = message.from_user.id
    text = message.text
    
    try:
        if text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
            record_date = datetime.now().strftime("%d.%m.%Y")
        elif text == "üìÖ –í—á–µ—Ä–∞":
            record_date = (datetime.now() - timedelta(days=1)).strftime("%d.%m.%Y")
        elif text == "üîô –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer(
                "–û—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=remove_keyboard()
            )
            await message.answer(
                "üì§ **–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ—Ä–¥–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_record_submission_menu()
            )
            return
        elif text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é":
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.2024):",
                reply_markup=get_cancel_keyboard()
            )
            return
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            if re.match(r'^\d{2}\.\d{2}\.\d{4}$', text):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                date_obj = datetime.strptime(text, "%d.%m.%Y")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
                if date_obj > datetime.now():
                    await message.answer(
                        "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.",
                        reply_markup=get_date_input_keyboard()
                    )
                    return
                record_date = text
            else:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì",
                    reply_markup=get_date_input_keyboard()
                )
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        user_record_data[user_id]['date'] = record_date
        
        await state.clear()
        await message.answer(
            f"‚úÖ –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {record_date}",
            reply_markup=remove_keyboard()
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        user_data = user_record_data[user_id]
        status_text = (
            "üì§ **–û–¢–ü–†–ê–í–ö–ê –†–ï–ö–û–†–î–ê –ù–ê –ü–†–û–í–ï–†–ö–£**\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "**–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:**\n"
            f"üìÖ –î–∞—Ç–∞: ‚úÖ {record_date}\n"
            f"üéØ –û—á–∫–∏: {'‚úÖ ' + str(user_data.get('score', '')) if 'score' in user_data else '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
            f"üé• –í–∏–¥–µ–æ: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' if 'video' in user_data else '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await message.answer(
            status_text,
            reply_markup=get_record_submission_menu()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
            reply_markup=get_date_input_keyboard()
        )

@router.callback_query(F.data == "set_record_score")
async def set_record_score(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤"""
    await state.set_state(RecordSubmissionStates.waiting_for_score)
    
    await callback.message.edit_text(
        "üéØ **–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤.\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –≤ FLL: 500\n\n"
        "üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, "
        "–∫–æ—Ç–æ—Ä–æ–µ –≤–∏–¥–Ω–æ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —ç–∫—Ä–∞–Ω–µ."
    )
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:",
        reply_markup=get_score_input_keyboard()
    )

@router.message(RecordSubmissionStates.waiting_for_score)
async def process_score_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –æ—á–∫–æ–≤"""
    user_id = message.from_user.id
    text = message.text
    
    if text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=remove_keyboard()
        )
        await message.answer(
            "üì§ **–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ—Ä–¥–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_record_submission_menu()
        )
        return
    
    try:
        score = int(text)
        if score < 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.",
                reply_markup=get_score_input_keyboard()
            )
            return
        
        if score > 500:
            await message.answer(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –≤ FLL: 500",
                reply_markup=get_score_input_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∫–∏
        user_record_data[user_id]['score'] = score
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {score}",
            reply_markup=remove_keyboard()
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        user_data = user_record_data[user_id]
        status_text = (
            "üì§ **–û–¢–ü–†–ê–í–ö–ê –†–ï–ö–û–†–î–ê –ù–ê –ü–†–û–í–ï–†–ö–£**\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "**–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:**\n"
            f"üìÖ –î–∞—Ç–∞: {'‚úÖ ' + user_data.get('date', '') if 'date' in user_data else '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üéØ –û—á–∫–∏: ‚úÖ {score}\n"
            f"üé• –í–∏–¥–µ–æ: {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' if 'video' in user_data else '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await message.answer(
            status_text,
            reply_markup=get_record_submission_menu()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_score_input_keyboard()
        )

@router.callback_query(F.data == "upload_video")
async def upload_video(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ"""
    await state.set_state(RecordSubmissionStates.waiting_for_video)
    
    await callback.message.edit_text(
        "üé• **–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–µ–µ –≤–∞—à —Ä–µ–∫–æ—Ä–¥.\n\n"
        "üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–∏–¥–µ–æ:**\n"
        "‚Ä¢ –ß–µ—Ç–∫–æ –≤–∏–¥–Ω–∞ –∏–≥—Ä–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å\n"
        "‚Ä¢ –í–∏–¥–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –±–æ–ª–µ–µ 50 –ú–ë\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π —Ä–∞—É–Ω–¥ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª –õ–∏–≥–∏ –†–µ—à–µ–Ω–∏–π\n\n"
        "‚ö†Ô∏è –í–∏–¥–µ–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"
    )
    
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ:",
        reply_markup=get_video_upload_keyboard()
    )

@router.message(RecordSubmissionStates.waiting_for_video, F.content_type == "video")
async def process_video_upload(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (50 –ú–ë = 50 * 1024 * 1024 –±–∞–π—Ç)
    if message.video.file_size > 50 * 1024 * 1024:
        await message.answer(
            "‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë",
            reply_markup=get_video_upload_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ (5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥)
    if message.video.duration > 300:
        await message.answer(
            "‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –º–∏–Ω—É—Ç",
            reply_markup=get_video_upload_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    user_record_data[user_id]['video'] = {
        'file_id': message.video.file_id,
        'file_unique_id': message.video.file_unique_id,
        'duration': message.video.duration,
        'file_size': message.video.file_size,
        'file_name': message.video.file_name or "video.mp4"
    }
# –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ process_video_upload

@router.message(RecordSubmissionStates.waiting_for_video)
async def process_invalid_video(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"""
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=remove_keyboard()
        )
        await message.answer(
            "üì§ **–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ—Ä–¥–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_record_submission_menu()
        )
        return
    
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª.",
        reply_markup=get_video_upload_keyboard()
    )

@router.callback_query(F.data == "submit_for_review")
async def submit_for_review(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if user_id not in user_record_data:
        await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
        return
    
    user_data = user_record_data[user_id]
    
    if not all(key in user_data for key in ['date', 'score', 'video']):
        missing = []
        if 'date' not in user_data:
            missing.append("üìÖ –î–∞—Ç–∞")
        if 'score' not in user_data:
            missing.append("üéØ –û—á–∫–∏")
        if 'video' not in user_data:
            missing.append("üé• –í–∏–¥–µ–æ")
        
        await callback.answer(
            f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {', '.join(missing)}",
            show_alert=True
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirmation_text = (
        "‚úÖ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –†–ï–ö–û–†–î–ê**\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:**\n\n"
        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {callback.from_user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"üÜî **ID:** {user_id}\n"
        f"üìÖ **–î–∞—Ç–∞ —Ä–µ–∫–æ—Ä–¥–∞:** {user_data['date']}\n"
        f"üéØ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:** {user_data['score']}\n"
        f"üé• **–í–∏–¥–µ–æ:** {user_data['video']['file_name']} "
        f"({user_data['video']['duration']}—Å, {user_data['video']['file_size'] // 1024 // 1024}–ú–ë)\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "‚ö†Ô∏è **–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å!**\n"
        "–†–µ–∫–æ—Ä–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:"
    )
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=get_confirmation_keyboard()
    )

@router.callback_query(F.data == "confirm_submit")
async def confirm_submit_record(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∫–æ—Ä–¥–∞"""
    user_id = callback.from_user.id
    user_data = user_record_data[user_id]
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–µ–∫–æ—Ä–¥–∞
    import time
    record_id = f"record_{user_id}_{int(time.time())}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ—Ä–¥ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
    record_data = {
        'id': record_id,
        'user_id': user_id,
        'username': callback.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω",
        'first_name': callback.from_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        'date': user_data['date'],
        'score': user_data['score'],
        'video': user_data['video'],
        'status': 'pending',
        'submission_time': datetime.now().strftime("%d.%m.%Y %H:%M"),
        'admin_comment': None
    }
    
    submitted_records.append(record_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    await send_record_to_admins(callback.message.bot, record_data)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_record_data[user_id]
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    success_text = (
        "üéâ **–†–ï–ö–û–†–î –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù!**\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üìã **ID —Ä–µ–∫–æ—Ä–¥–∞:** `{record_id}`\n"
        f"üìÖ **–î–∞—Ç–∞:** {record_data['date']}\n"
        f"üéØ **–û—á–∫–∏:** {record_data['score']}\n"
        f"‚è∞ **–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:** {record_data['submission_time']}\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "‚úÖ –í–∞—à —Ä–µ–∫–æ—Ä–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\n"
        "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "üìß –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–µ–∫–æ—Ä–¥–∞\n\n"
        "üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ —Ä–µ–∫–æ—Ä–¥—ã\""
    )
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÜ –ú–æ–∏ —Ä–µ–∫–æ—Ä–¥—ã", callback_data="my_records")],
        [InlineKeyboardButton(text="üìä –¢–æ–ø —Ä–µ–∫–æ—Ä–¥–æ–≤", callback_data="top_records")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–∫–æ—Ä–¥–∞–º", callback_data="records")]
    ])
    
    await callback.message.edit_text(
        success_text,
        reply_markup=keyboard
    )

@router.callback_query(F.data == "cancel_submit")
async def cancel_submit_record(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∫–æ—Ä–¥–∞"""
    await callback.message.edit_text(
        "‚ùå **–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ—Ä–¥–∞.",
        reply_markup=get_record_submission_menu()
    )

async def send_record_to_admins(bot, record_data):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
    ADMIN_IDS = [123456789, 987654321]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤
    
    admin_text = (
        "üîî **–ù–û–í–´–ô –†–ï–ö–û–†–î –ù–ê –ü–†–û–í–ï–†–ö–£**\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üìã **ID —Ä–µ–∫–æ—Ä–¥–∞:** `{record_data['id']}`\n"
        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {record_data['first_name']}\n"
        f"üÜî **User ID:** `{record_data['user_id']}`\n"
        f"üë§ **Username:** @{record_data['username']}\n\n"
        f"üìÖ **–î–∞—Ç–∞ —Ä–µ–∫–æ—Ä–¥–∞:** {record_data['date']}\n"
        f"üéØ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:** {record_data['score']}\n"
        f"‚è∞ **–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:** {record_data['submission_time']}\n\n"
        f"üé• **–í–∏–¥–µ–æ:** {record_data['video']['file_name']}\n"
        f"‚è± **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {record_data['video']['duration']} —Å–µ–∫\n"
        f"üì¶ **–†–∞–∑–º–µ—Ä:** {record_data['video']['file_size'] // 1024 // 1024} –ú–ë\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∏–¥–µ–æ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ:"
    )
    
    for admin_id in ADMIN_IDS:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await bot.send_message(
                chat_id=admin_id,
                text=admin_text,
                parse_mode="Markdown"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            await bot.send_video(
                chat_id=admin_id,
                video=record_data['video']['file_id'],
                caption=f"üé• –í–∏–¥–µ–æ —Ä–µ–∫–æ—Ä–¥–∞ –æ—Ç {record_data['first_name']} ({record_data['score']} –æ—á–∫–æ–≤)",
                reply_markup=get_admin_record_review_keyboard(record_data['id'])
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from keybords.keybord_client import kb_client
    
    await callback.message.edit_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FLL Telegram Bot!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=kb_client
    )

@router.callback_query(F.data == "back_to_records")
async def back_to_records(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é —Ä–µ–∫–æ—Ä–¥–æ–≤"""
    await show_records_menu(callback)


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FLL Telegram Bot!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=kb_client
    )

@router.callback_query(F.data == "back_to_records")
async def back_to_records(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é —Ä–µ–∫–æ—Ä–¥–æ–≤"""
    await show_records_menu(callback)