from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from keybords.keybord_client import kb_client
import re
import sqlite3
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from database.engine import async_session_factory
from database.requests import save_submitted_record, get_top_records, get_russia_record, get_user_records, get_user_submitted_records
from database.models import User, UserTeams

from records.record_kb import (
    get_record_main_menu, get_record_submission_menu, get_date_input_keyboard,
    get_score_input_keyboard, get_video_upload_keyboard, get_admin_record_review_keyboard,
    get_record_status_keyboard, remove_keyboard, get_cancel_keyboard, get_confirmation_keyboard
)

router = Router()

def check_user_registration_simple(user_id: int) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        conn = sqlite3.connect('mydatabase.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ users –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –æ–Ω –∫ –∫–æ–º–∞–Ω–¥–µ
        cursor.execute("""
            SELECT u.tg_id, u.team_id 
            FROM users u 
            WHERE u.tg_id = ? AND u.team_id IS NOT NULL
        """, (user_id,))
        
        result = cursor.fetchone()
        conn.close()
        
        return result is not None
    except Exception:
        return False

def is_video_url(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∏–¥–µ–æ"""
    import re
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ—Ö–æ—Å—Ç–∏–Ω–≥–æ–≤
    video_patterns = [
        r'https?://(?:www\.)?youtube\.com/watch\?v=[\w-]+',
        r'https?://(?:www\.)?youtu\.be/[\w-]+',
        r'https?://(?:www\.)?vimeo\.com/\d+',
        r'https?://(?:www\.)?dailymotion\.com/video/[\w-]+',
        r'https?://(?:www\.)?rutube\.ru/video/[\w-]+',
        r'https?://(?:www\.)?vk\.com/video-?\d+_\d+',
        r'https?://(?:www\.)?ok\.ru/video/\d+',
        r'https?://(?:www\.)?mail\.ru/video/[\w-]+',
        r'https?://(?:www\.)?twitch\.tv/[\w-]+',
        r'https?://(?:www\.)?tiktok\.com/@[\w-]+/video/\d+'
    ]
    
    for pattern in video_patterns:
        if re.match(pattern, text, re.IGNORECASE):
            return True
    
    return False

def get_video_platform(url: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ"""
    import re
    
    if re.search(r'youtube\.com|youtu\.be', url, re.IGNORECASE):
        return "YouTube"
    elif re.search(r'vimeo\.com', url, re.IGNORECASE):
        return "Vimeo"
    elif re.search(r'dailymotion\.com', url, re.IGNORECASE):
        return "Dailymotion"
    elif re.search(r'rutube\.ru', url, re.IGNORECASE):
        return "Rutube"
    elif re.search(r'vk\.com', url, re.IGNORECASE):
        return "VK"
    elif re.search(r'ok\.ru', url, re.IGNORECASE):
        return "OK.ru"
    elif re.search(r'mail\.ru', url, re.IGNORECASE):
        return "Mail.ru"
    elif re.search(r'twitch\.tv', url, re.IGNORECASE):
        return "Twitch"
    elif re.search(r'tiktok\.com', url, re.IGNORECASE):
        return "TikTok"
    else:
        return "–î—Ä—É–≥–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"

class RecordSubmissionStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_score = State()
    waiting_for_video = State()
    confirming_submission = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–æ—Ä–¥–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_record_data = {}
submitted_records = []  # –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤

@router.callback_query(F.data == "records")
async def show_records_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–∫–æ—Ä–¥–æ–≤"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not check_user_registration_simple(user_id):
        await callback.message.edit_text(
            "üèÜ –ú–µ–Ω—é —Ä–µ–∫–æ—Ä–¥–æ–≤ –õ–∏–≥–∏ –†–µ—à–µ–Ω–∏–π\n\n"
            "‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫–æ—Ä–¥–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
            "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–∫–æ—Ä–¥ –†–æ—Å—Å–∏–∏\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=get_record_main_menu()
        )
        return
    
    await callback.message.edit_text(
        "üèÜ –ú–µ–Ω—é —Ä–µ–∫–æ—Ä–¥–æ–≤ –õ–∏–≥–∏ –†–µ—à–µ–Ω–∏–π\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–µ–∫–æ—Ä–¥–æ–≤ –õ–∏–≥–∏ –†–µ—à–µ–Ω–∏–π!\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–∫–æ—Ä–¥ –†–æ—Å—Å–∏–∏\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_record_main_menu()
    )

@router.callback_query(F.data == "submit_record")
async def start_record_submission(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not check_user_registration_simple(user_id):
        await callback.answer(
            "‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ!", 
            show_alert=True
        )
        await callback.message.edit_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω\n\n"
            "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=get_record_main_menu()
        )
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_record_data:
        user_record_data[user_id] = {}

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –∑–∞–ø—Ä–æ—Å–∞ –¥–∞—Ç—ã
    await state.set_state(RecordSubmissionStates.waiting_for_date)
    await callback.message.edit_text(
        "üì§ –û–¢–ü–†–ê–í–ö–ê –†–ï–ö–û–†–î–ê –ù–ê –ü–†–û–í–ï–†–ö–£\n\n"
        "–®–∞–≥ 1 –∏–∑ 3 ‚Äî —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.\n"
        "‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=get_date_input_keyboard()
    )

@router.callback_query(F.data == "set_record_date")
async def set_record_date(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Ä–µ–∫–æ—Ä–¥–∞"""
    await state.set_state(RecordSubmissionStates.waiting_for_date)
    
    await callback.message.edit_text(
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
        "‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º"
    )
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=get_date_input_keyboard()
    )

@router.message(RecordSubmissionStates.waiting_for_date)
async def process_date_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã"""
    user_id = message.from_user.id
    text = message.text
    
    try:
        if text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
            record_date = datetime.now().strftime("%d.%m.%Y")
        elif text == "üìÖ –í—á–µ—Ä–∞":
            record_date = (datetime.now() - timedelta(days=1)).strftime("%d.%m.%Y")
        elif text == "üîô –û—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer(
                "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ—Ä–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=remove_keyboard()
            )
            await message.answer(
                "üèÜ –ú–µ–Ω—é —Ä–µ–∫–æ—Ä–¥–æ–≤",
                reply_markup=get_record_main_menu()
            )
            return
        elif text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é":
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.2024):",
                reply_markup=get_cancel_keyboard()
            )
            return
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            if re.match(r'^\d{2}\.\d{2}\.\d{4}$', text):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                date_obj = datetime.strptime(text, "%d.%m.%Y")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
                if date_obj > datetime.now():
                    await message.answer(
                        "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.",
                        reply_markup=get_date_input_keyboard()
                    )
                    return
                record_date = text
            else:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì",
                    reply_markup=get_date_input_keyboard()
                )
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        user_record_data[user_id]['date'] = record_date
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî –æ—á–∫–∏
        await state.set_state(RecordSubmissionStates.waiting_for_score)
        await message.answer(
            f"‚úÖ –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {record_date}",
            reply_markup=remove_keyboard()
        )
        await message.answer(
            "üéØ –®–∞–≥ 2 –∏–∑ 3 ‚Äî —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 500.",
            reply_markup=get_score_input_keyboard()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
            reply_markup=get_date_input_keyboard()
        )

@router.callback_query(F.data == "set_record_score")
async def set_record_score(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤"""
    await state.set_state(RecordSubmissionStates.waiting_for_score)
    
    await callback.message.edit_text(
        "üéØ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤.\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –≤ FLL: 500\n\n"
        "üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, "
        "–∫–æ—Ç–æ—Ä–æ–µ –≤–∏–¥–Ω–æ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —ç–∫—Ä–∞–Ω–µ."
    )
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:",
        reply_markup=get_score_input_keyboard()
    )

@router.message(RecordSubmissionStates.waiting_for_score)
async def process_score_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –æ—á–∫–æ–≤"""
    user_id = message.from_user.id
    text = message.text
    
    if text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ—Ä–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=remove_keyboard()
        )
        await message.answer(
            "üèÜ –ú–µ–Ω—é —Ä–µ–∫–æ—Ä–¥–æ–≤",
            reply_markup=get_record_main_menu()
        )
        return
    
    try:
        score = int(text)
        if score < 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.",
                reply_markup=get_score_input_keyboard()
            )
            return
        
        if score > 500:
            await message.answer(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –≤ FLL: 500",
                reply_markup=get_score_input_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∫–∏
        user_record_data[user_id]['score'] = score
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚Äî –≤–∏–¥–µ–æ
        await state.set_state(RecordSubmissionStates.waiting_for_video)
        await message.answer(
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {score}",
            reply_markup=remove_keyboard()
        )
        await message.answer(
            "üé• –®–∞–≥ 3 –∏–∑ 3 ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.\n\n"
            "–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–º (–¥–æ 50 –ú–ë –∏ –¥–æ 5 –º–∏–Ω—É—Ç) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (YouTube, Vimeo –∏ —Ç.–¥.)",
            reply_markup=get_video_upload_keyboard()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_score_input_keyboard()
        )

@router.callback_query(F.data == "upload_video")
async def upload_video(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ"""
    await state.set_state(RecordSubmissionStates.waiting_for_video)
    
    await callback.message.edit_text(
        "üé• **–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
        "üìπ –í–∏–¥–µ–æ —Ñ–∞–π–ª - –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é\n"
        "üîó –°—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ - –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, Vimeo –∏ —Ç.–¥.\n\n"
        "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–∏–¥–µ–æ:\n"
        "‚Ä¢ –ß–µ—Ç–∫–æ –≤–∏–¥–Ω–∞ –∏–≥—Ä–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å\n"
        "‚Ä¢ –í–∏–¥–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π —Ä–∞—É–Ω–¥ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª –õ–∏–≥–∏ –†–µ—à–µ–Ω–∏–π\n\n"
        "‚ö†Ô∏è –í–∏–¥–µ–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"
    )
    
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:",
        reply_markup=get_video_upload_keyboard()
    )

@router.message(RecordSubmissionStates.waiting_for_video, F.content_type == "video")
async def process_video_upload(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (50 –ú–ë = 50 * 1024 * 1024 –±–∞–π—Ç)
    if message.video.file_size > 50 * 1024 * 1024:
        await message.answer(
            "‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë",
            reply_markup=get_video_upload_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ (5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥)
    if message.video.duration > 300:
        await message.answer(
            "‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –º–∏–Ω—É—Ç",
            reply_markup=get_video_upload_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    user_record_data[user_id]['video'] = {
        'type': 'file',
        'file_id': message.video.file_id,
        'file_unique_id': message.video.file_unique_id,
        'duration': message.video.duration,
        'file_size': message.video.file_size,
        'file_name': message.video.file_name or "video.mp4"
    }
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await state.set_state(RecordSubmissionStates.confirming_submission)
    await message.answer(
        f"‚úÖ –í–∏–¥–µ–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {user_record_data[user_id]['video']['file_name']}",
        reply_markup=remove_keyboard()
    )
    user_data = user_record_data[user_id]
    video_info = f"üìπ {user_data['video']['file_name']} ({user_data['video']['duration']}—Å, {user_data['video']['file_size'] // 1024 // 1024}–ú–ë)"
    confirmation_text = (
        "‚úÖ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –†–ï–ö–û–†–î–ê**\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:**\n\n"
        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {message.from_user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"üÜî **ID:** {user_id}\n"
        f"üìÖ **–î–∞—Ç–∞ —Ä–µ–∫–æ—Ä–¥–∞:** {user_data['date']}\n"
        f"üéØ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:** {user_data['score']}\n"
        f"üé• **–í–∏–¥–µ–æ:** {video_info}\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "‚ö†Ô∏è **–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å!**\n"
        "–†–µ–∫–æ—Ä–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:")
    await message.answer(
        confirmation_text,
        reply_markup=get_confirmation_keyboard()
    )

@router.message(RecordSubmissionStates.waiting_for_video)
async def process_video_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –≤–∏–¥–µ–æ (—Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫–∞)"""
    user_id = message.from_user.id
    text = message.text
    
    if text == "üîô –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ—Ä–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=remove_keyboard()
        )
        await message.answer(
            "üèÜ –ú–µ–Ω—é —Ä–µ–∫–æ—Ä–¥–æ–≤",
            reply_markup=get_record_main_menu()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∏–¥–µ–æ
    if is_video_url(text):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
        user_record_data[user_id]['video'] = {
            'type': 'url',
            'url': text,
            'platform': get_video_platform(text)
        }
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await state.set_state(RecordSubmissionStates.confirming_submission)
        await message.answer(
            f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {text}",
            reply_markup=remove_keyboard()
        )
        user_data = user_record_data[user_id]
        video_info = f"üîó {user_data['video']['platform']}: {user_data['video']['url']}"
        confirmation_text = (
            "‚úÖ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –†–ï–ö–û–†–î–ê**\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:**\n\n"
            f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {message.from_user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            f"üÜî **ID:** {user_id}\n"
            f"üìÖ **–î–∞—Ç–∞ —Ä–µ–∫–æ—Ä–¥–∞:** {user_data['date']}\n"
            f"üéØ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:** {user_data['score']}\n"
            f"üé• **–í–∏–¥–µ–æ:** {video_info}\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "‚ö†Ô∏è **–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å!**\n"
            "–†–µ–∫–æ—Ä–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:")
        await message.answer(
            confirmation_text,
            reply_markup=get_confirmation_keyboard()
        )
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞, –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n"
        "‚Ä¢ YouTube\n"
        "‚Ä¢ Vimeo\n"
        "‚Ä¢ Dailymotion\n"
        "‚Ä¢ –ò –¥—Ä—É–≥–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∏–¥–µ–æ—Ö–æ—Å—Ç–∏–Ω–≥–∏",
        reply_markup=get_video_upload_keyboard()
    )

@router.callback_query(F.data == "submit_for_review")
async def submit_for_review(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ —Ä–∞–∑ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if not check_user_registration_simple(user_id):
        await callback.answer(
            "‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ!", 
            show_alert=True
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if user_id not in user_record_data:
        await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
        return
    
    user_data = user_record_data[user_id]
    
    if not all(key in user_data for key in ['date', 'score', 'video']):
        missing = []
        if 'date' not in user_data:
            missing.append("üìÖ –î–∞—Ç–∞")
        if 'score' not in user_data:
            missing.append("üéØ –û—á–∫–∏")
        if 'video' not in user_data:
            missing.append("üé• –í–∏–¥–µ–æ")
        
        await callback.answer(
            f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {', '.join(missing)}",
            show_alert=True
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    video_info = ""
    if user_data['video']['type'] == 'file':
        video_info = f"üìπ {user_data['video']['file_name']} ({user_data['video']['duration']}—Å, {user_data['video']['file_size'] // 1024 // 1024}–ú–ë)"
    else:
        video_info = f"üîó {user_data['video']['platform']}: {user_data['video']['url']}"
    
    confirmation_text = (
        "‚úÖ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –†–ï–ö–û–†–î–ê**\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:**\n\n"
        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {callback.from_user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"üÜî **ID:** {user_id}\n"
        f"üìÖ **–î–∞—Ç–∞ —Ä–µ–∫–æ—Ä–¥–∞:** {user_data['date']}\n"
        f"üéØ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:** {user_data['score']}\n"
        f"üé• **–í–∏–¥–µ–æ:** {video_info}\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "‚ö†Ô∏è **–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å!**\n"
        "–†–µ–∫–æ—Ä–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:"
    )
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=get_confirmation_keyboard()
    )

@router.callback_query(F.data == "confirm_submit")
async def confirm_submit_record(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∫–æ—Ä–¥–∞"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ —Ä–∞–∑ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if not check_user_registration_simple(user_id):
        await callback.answer(
            "‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ—Ä–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ!", 
            show_alert=True
        )
        return
    
    user_data = user_record_data[user_id]
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–µ–∫–æ—Ä–¥–∞
    import time
    record_id = f"record_{user_id}_{int(time.time())}"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º team_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect('mydatabase.db')
        cursor = conn.cursor()
        cursor.execute("SELECT team_id FROM users WHERE tg_id = ?", (user_id,))
        result = cursor.fetchone()
        team_id = result[0] if result else None
        conn.close()
        
        if not team_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–º–∞–Ω–¥–µ!", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ—Ä–¥ –≤ –ë–î
        async with async_session_factory() as session:
            await save_submitted_record(
                record_id=record_id,
                user_tg_id=user_id,
                team_id=team_id,
                username=callback.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω",
                first_name=callback.from_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                date=user_data['date'],
                score=user_data['score'],
                video_data=user_data['video'],
                session=session
            )
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        record_data = {
            'id': record_id,
            'user_id': user_id,
            'username': callback.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω",
            'first_name': callback.from_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            'date': user_data['date'],
            'score': user_data['score'],
            'video': user_data['video'],
            'status': 'pending',
            'submission_time': datetime.now().strftime("%d.%m.%Y %H:%M"),
            'admin_comment': None
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await send_record_to_admins(callback.message.bot, record_data)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_record_data[user_id]
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–æ—Ä–¥–∞: {str(e)}", show_alert=True)
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    success_text = (
        "üéâ **–†–ï–ö–û–†–î –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù!**\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üìã **ID —Ä–µ–∫–æ—Ä–¥–∞:** `{record_id}`\n"
        f"üìÖ **–î–∞—Ç–∞:** {record_data['date']}\n"
        f"üéØ **–û—á–∫–∏:** {record_data['score']}\n"
        f"‚è∞ **–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:** {record_data['submission_time']}\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "‚úÖ –í–∞—à —Ä–µ–∫–æ—Ä–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\n"
        "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "üìß –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–µ–∫–æ—Ä–¥–∞\n\n"
        "üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ —Ä–µ–∫–æ—Ä–¥—ã\""
    )
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÜ –ú–æ–∏ —Ä–µ–∫–æ—Ä–¥—ã", callback_data="my_records")],
        [InlineKeyboardButton(text="üìä –¢–æ–ø —Ä–µ–∫–æ—Ä–¥–æ–≤", callback_data="top_records")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–∫–æ—Ä–¥–∞–º", callback_data="records")]
    ])
    
    await callback.message.edit_text(
        success_text,
        reply_markup=keyboard
    )

@router.callback_query(F.data == "cancel_submit")
async def cancel_submit_record(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∫–æ—Ä–¥–∞"""
    await callback.message.edit_text(
        "‚ùå **–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ—Ä–¥–∞.",
        reply_markup=get_record_submission_menu()
    )

async def send_record_to_admins(bot, record_data):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
    ADMIN_IDS = [1349663945]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    video_info = ""
    if record_data['video']['type'] == 'file':
        video_info = (
            f"üé• **–í–∏–¥–µ–æ:** {record_data['video']['file_name']}\n"
            f"‚è± **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {record_data['video']['duration']} —Å–µ–∫\n"
            f"üì¶ **–†–∞–∑–º–µ—Ä:** {record_data['video']['file_size'] // 1024 // 1024} –ú–ë"
        )
    else:
        video_info = (
            f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ:** {record_data['video']['url']}\n"
            f"üì∫ **–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** {record_data['video']['platform']}"
        )
    
    admin_text = (
        "üîî **–ù–û–í–´–ô –†–ï–ö–û–†–î –ù–ê –ü–†–û–í–ï–†–ö–£**\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üìã **ID —Ä–µ–∫–æ—Ä–¥–∞:** `{record_data['id']}`\n"
        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {record_data['first_name']}\n"
        f"üÜî **User ID:** `{record_data['user_id']}`\n"
        f"üë§ **Username:** @{record_data['username']}\n\n"
        f"üìÖ **–î–∞—Ç–∞ —Ä–µ–∫–æ—Ä–¥–∞:** {record_data['date']}\n"
        f"üéØ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:** {record_data['score']}\n"
        f"‚è∞ **–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:** {record_data['submission_time']}\n\n"
        f"{video_info}\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∏–¥–µ–æ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ:"
    )
    
    for admin_id in ADMIN_IDS:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await bot.send_message(
                chat_id=admin_id,
                text=admin_text,
                parse_mode="Markdown"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É
            if record_data['video']['type'] == 'file':
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª
                await bot.send_video(
                    chat_id=admin_id,
                    video=record_data['video']['file_id'],
                    caption=f"üé• –í–∏–¥–µ–æ —Ä–µ–∫–æ—Ä–¥–∞ –æ—Ç {record_data['first_name']} ({record_data['score']} –æ—á–∫–æ–≤)",
                    reply_markup=get_admin_record_review_keyboard(record_data['id'])
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
                await bot.send_message(
                    chat_id=admin_id,
                    text=f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ —Ä–µ–∫–æ—Ä–¥–∞:**\n{record_data['video']['url']}\n\n"
                         f"üë§ –û—Ç: {record_data['first_name']}\n"
                         f"üéØ –û—á–∫–∏: {record_data['score']}",
                    reply_markup=get_admin_record_review_keyboard(record_data['id'])
                )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from keybords.keybord_client import kb_client
    
    await callback.message.edit_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FLL Telegram Bot!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=kb_client
    )

@router.callback_query(F.data == "back_to_records")
async def back_to_records(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é —Ä–µ–∫–æ—Ä–¥–æ–≤"""
    await show_records_menu(callback)


@router.callback_query(F.data == "my_records")
async def show_my_records(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ—Ä–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not check_user_registration_simple(user_id):
        await callback.answer("‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ!", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        approved_records = await get_user_records(user_id, session)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        submitted_records = await get_user_submitted_records(user_id, session)
        
        if not approved_records and not submitted_records:
            await callback.message.edit_text(
                "üìä **–ú–æ–∏ —Ä–µ–∫–æ—Ä–¥—ã**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ—Ä–¥–æ–≤.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥", callback_data="submit_record")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="records")]
                ])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∫–æ—Ä–¥–∞–º–∏
        text = "üìä **–ú–æ–∏ —Ä–µ–∫–æ—Ä–¥—ã**\n\n"
        
        if approved_records:
            text += "‚úÖ **–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã:**\n"
            for i, record in enumerate(approved_records[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                text += f"{i}. üéØ {record.result} –æ—á–∫–æ–≤\n"
            if len(approved_records) > 5:
                text += f"... –∏ –µ—â–µ {len(approved_records) - 5} —Ä–µ–∫–æ—Ä–¥–æ–≤\n"
            text += "\n"
        
        if submitted_records:
            text += "‚è≥ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:**\n"
            for i, record in enumerate(submitted_records[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                status_emoji = "‚è≥" if record.status == "pending" else "‚úÖ" if record.status == "approved" else "‚ùå"
                text += f"{i}. {status_emoji} {record.score} –æ—á–∫–æ–≤ ({record.date})\n"
            if len(submitted_records) > 3:
                text += f"... –∏ –µ—â–µ {len(submitted_records) - 3} —Ä–µ–∫–æ—Ä–¥–æ–≤\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥", callback_data="submit_record")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="records")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")




@router.callback_query(F.data == "russia_record")
async def show_russia_record(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–∫–æ—Ä–¥ –†–æ—Å—Å–∏–∏"""
    try:
        record = await get_russia_record(session)
        
        if not record:
            await callback.message.edit_text(
                "üèÜ **–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–∫–æ—Ä–¥ –†–æ—Å—Å–∏–∏**\n\n"
                "–ü–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤.\n\n"
                "–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥", callback_data="submit_record")],
                    [InlineKeyboardButton(text="üìä –¢–æ–ø —Ä–µ–∫–æ—Ä–¥–æ–≤", callback_data="top_records")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="records")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
        team_query = await session.execute(
            select(UserTeams).where(UserTeams.id == record.team_id)
        )
        team = team_query.scalar_one_or_none()
        
        team_name = team.team if team else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
        team_city = team.city if team else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"
        
        text = (
            "üèÜ **–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–∫–æ—Ä–¥ –†–æ—Å—Å–∏–∏**\n\n"
            f"ü•á **–†–µ–∫–æ—Ä–¥:** {record.result} –æ—á–∫–æ–≤\n"
            f"üë• **–ö–æ–º–∞–Ω–¥–∞:** {team_name}\n"
            f"üèôÔ∏è **–ì–æ—Ä–æ–¥:** {team_city}\n"
            f"‚è∞ **–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:** {record.created_at.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            "üí° –•–æ—Ç–∏—Ç–µ –ø–æ–±–∏—Ç—å —Ä–µ–∫–æ—Ä–¥? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥", callback_data="submit_record")],
            [InlineKeyboardButton(text="üìä –¢–æ–ø —Ä–µ–∫–æ—Ä–¥–æ–≤", callback_data="top_records")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="records")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")




@router.callback_query(F.data == "top_records")
async def show_top_records(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø —Ä–µ–∫–æ—Ä–¥–æ–≤"""
    try:
        records = await get_top_records(session, 10)
        
        if not records:
            await callback.message.edit_text(
                "üìä **–¢–æ–ø —Ä–µ–∫–æ—Ä–¥–æ–≤**\n\n"
                "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ—Ä–¥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Ä–µ–∫–æ—Ä–¥ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥", callback_data="submit_record")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="records")]
                ])
            )
            return
        
        text = "üìä **–¢–æ–ø —Ä–µ–∫–æ—Ä–¥–æ–≤ –†–æ—Å—Å–∏–∏**\n\n"
        
        for i, record in enumerate(records, 1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
            team_query = await session.execute(
                select(UserTeams).where(UserTeams.id == record.team_id)
            )
            team = team_query.scalar_one_or_none()
            
            team_name = team.team if team else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
            team_city = team.city if team else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"
            
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            
            text += f"{medal} **{record.result} –æ—á–∫–æ–≤**\n"
            text += f"   üë• {team_name} ({team_city})\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ—Ä–¥", callback_data="submit_record")],
            [InlineKeyboardButton(text="üèÜ –†–µ–∫–æ—Ä–¥ –†–æ—Å—Å–∏–∏", callback_data="russia_record")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="records")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")





