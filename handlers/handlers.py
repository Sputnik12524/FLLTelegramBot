from aiogram import Router, F
from aiogram.types import CallbackQuery
from calculator import fll_calculator


router = Router()

@router.callback_query(F.data == "missions")
async def show_calculator(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    try:
        keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)
        await callback.message.edit_text(
            "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏—Å—Å–∏–π FLL - –ë–æ–≥–∞—Ç—ã–π —É—Ä–æ–∂–∞–π**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–∫–æ–≤:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith("calc_mission_"))
async def show_mission_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∏—Å—Å–∏–∏"""
    try:
        mission_id = callback.data.replace("calc_", "")
        if mission_id not in fll_calculator.missions:
            await callback.answer("–ú–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
            
        mission_name = fll_calculator.missions[mission_id]["name"]
        current_score = fll_calculator.get_mission_score(callback.from_user.id, mission_id)
        
        keyboard = fll_calculator.get_mission_keyboard(mission_id)
        await callback.message.edit_text(
            f"üéØ **{mission_name}**\n\n"
            f"–¢–µ–∫—É—â–∏–µ –æ—á–∫–∏: {current_score}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith("calc_set_"))
async def set_mission_score(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—á–∫–∏ –∑–∞ –º–∏—Å—Å–∏—é"""
    try:
        parts = callback.data.split("_")
        if len(parts) < 4:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
            
        mission_id = f"{parts[2]}_{parts[3]}"
        score = int(parts[4])
        
        success = fll_calculator.set_mission_score(callback.from_user.id, mission_id, score)
        
        if success:
            keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)
            await callback.message.edit_text(
                "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏—Å—Å–∏–π FLL - –ë–æ–≥–∞—Ç—ã–π —É—Ä–æ–∂–∞–π**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–∫–æ–≤:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer(f"‚úÖ –û—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {score}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—á–∫–æ–≤!")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "calc_total")
async def show_total_score(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É –æ—á–∫–æ–≤"""
    try:
        breakdown = fll_calculator.get_score_breakdown(callback.from_user.id)
        keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)
        
        await callback.message.edit_text(
            breakdown,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "calc_reset")
async def reset_calculator(callback: CallbackQuery):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –æ—á–∫–∏"""
    try:
        fll_calculator.reset_scores(callback.from_user.id)
        keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)
        
        await callback.message.edit_text(
            "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏—Å—Å–∏–π FLL - –ë–æ–≥–∞—Ç—ã–π —É—Ä–æ–∂–∞–π**\n\n"
            "–í—Å–µ –æ—á–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–∫–æ–≤:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer("üîÑ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–±—Ä–æ—à–µ–Ω!")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "calc_back")
async def back_to_calculator(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    try:
        keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)
        await callback.message.edit_text(
            "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏—Å—Å–∏–π FLL - –ë–æ–≥–∞—Ç—ã–π —É—Ä–æ–∂–∞–π**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–∫–æ–≤:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
