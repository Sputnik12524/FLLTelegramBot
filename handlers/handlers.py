from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import User, UserTeams
from calculator import fll_calculator
from sqlalchemy import select


class Register(StatesGroup):
    waiting_info = State()


router = Router()


@router.callback_query(F.data == "missions")
async def show_calculator(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    try:
        keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)
        await callback.message.edit_text(
            "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏—Å—Å–∏–π FLL - –ë–æ–≥–∞—Ç—ã–π —É—Ä–æ–∂–∞–π**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–∫–æ–≤:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("calc_mission_"))
async def show_mission_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∏—Å—Å–∏–∏"""
    try:
        mission_id = callback.data.replace("calc_", "")
        if mission_id not in fll_calculator.missions:
            await callback.answer("–ú–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        mission_name = fll_calculator.missions[mission_id]["name"]
        current_score = fll_calculator.get_mission_score(callback.from_user.id, mission_id)

        keyboard = fll_calculator.get_mission_keyboard(mission_id)
        await callback.message.edit_text(
            f"üéØ **{mission_name}**\n\n"
            f"–¢–µ–∫—É—â–∏–µ –æ—á–∫–∏: {current_score}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("calc_set_"))
async def set_mission_score(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—á–∫–∏ –∑–∞ –º–∏—Å—Å–∏—é"""
    try:
        parts = callback.data.split("_")
        if len(parts) < 4:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return

        mission_id = f"{parts[2]}_{parts[3]}"
        score = int(parts[4])

        success = fll_calculator.set_mission_score(callback.from_user.id, mission_id, score)

        if success:
            keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)
            await callback.message.edit_text(
                "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏—Å—Å–∏–π FLL - –ë–æ–≥–∞—Ç—ã–π —É—Ä–æ–∂–∞–π**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–∫–æ–≤:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer(f"‚úÖ –û—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {score}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—á–∫–æ–≤!")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "calc_total")
async def show_total_score(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É –æ—á–∫–æ–≤"""
    try:
        breakdown = fll_calculator.get_score_breakdown(callback.from_user.id)
        keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)

        await callback.message.edit_text(
            breakdown,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "calc_reset")
async def reset_calculator(callback: CallbackQuery):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –æ—á–∫–∏"""
    try:
        fll_calculator.reset_scores(callback.from_user.id)
        keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)

        await callback.message.edit_text(
            "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏—Å—Å–∏–π FLL - –ë–æ–≥–∞—Ç—ã–π —É—Ä–æ–∂–∞–π**\n\n"
            "–í—Å–µ –æ—á–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–∫–æ–≤:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer("üîÑ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–±—Ä–æ—à–µ–Ω!")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "calc_back")
async def back_to_calculator(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    try:
        keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)
        await callback.message.edit_text(
            "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏—Å—Å–∏–π FLL - –ë–æ–≥–∞—Ç—ã–π —É—Ä–æ–∂–∞–π**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–∫–æ–≤:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "register")
async def register(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
    await callback.message.answer(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ\n–ì–æ—Ä–æ–¥\n–ù–æ–º–µ—Ä")
    await state.set_state(Register.waiting_info)


@router.message(Register.waiting_info)
async def register2(message: Message, state: FSMContext, session: AsyncSession): # session: AsyncSession –î–û–õ–ñ–ï–ù –±—ã—Ç—å –∑–¥–µ—Å—å
    user_tg_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º TG ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"DEBUG: register2 - User TG ID: {user_tg_id}")
    parts = message.text.strip().split('\n')

    if len(parts) != 3:
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: \nSputnik Original\n–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n12524")
        return

    tn, c, num = parts

    try:
        numb = int(num)
    except ValueError:
        await message.answer("–ù–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    try:
        async with session.begin():
            # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            team_obj = await session.scalar(
                select(UserTeams).where(
                    UserTeams.team == tn,
                    UserTeams.city == c,
                    UserTeams.number == numb
                )
            )
            if not team_obj:
                # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
                team_obj = UserTeams(team=tn, city=c, number=numb)
                print(f"DEBUG: register2 - Team not found, creating new: {tn}, {c}, {numb}")
                session.add(team_obj)
                await session.flush()  # flush() –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å team.id –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã


            # –ò—â–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_obj = await session.scalar(
                select(User).where(User.tg_id == user_tg_id)
            )

            if user_obj:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ team_id.
                # SQLAlchemy –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç–∞—Ö,
                # –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Å—Å–∏–∏. session.add() –∑–¥–µ—Å—å –ù–ï –ù–£–ñ–ï–ù,
                # –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —É–∂–µ —É–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏–µ–π.
                print(
                    f"DEBUG: register2 - User {user_tg_id} found. Current team_id: {user_obj.team_id}. New team_id: {team_obj.id}")
                if user_obj.team_id == team_obj.id:
                    await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. :)")
                else:
                    user_obj.team_id = team_obj.id
                    await message.answer(f"–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ '{team_obj.team}'! :)")
                print(f"DEBUG: register2 - Team ID found/created: {team_obj.id}, Number: {team_obj.number}")
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î (—ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ, –µ—Å–ª–∏ /start —Ä–∞–±–æ—Ç–∞–µ—Ç),
                # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ.
                print(f"DEBUG: register2 - User {user_tg_id} NOT found. Creating new User record.")
                user_obj = User(tg_id=user_tg_id, team_id=team_obj.id)
                session.add(user_obj)
                await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! :)")
                await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ª—é–±–∞—è –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥–µ, –µ—Å–ª–∏ team –Ω–µ unique)
        # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        print(f"ERROR in register2 for user {user_tg_id}: {e}")
        await state.clear()  # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–∞–¥

