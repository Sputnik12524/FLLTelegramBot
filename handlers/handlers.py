from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import User, UserTeams
from calculator import fll_calculator
from sqlalchemy import select
from datetime import datetime
from database.models import FLLResult, User
from aiogram import types
from local_storage import local_storage



class Register(StatesGroup):
    waiting_info = State()


router = Router()


@router.callback_query(F.data == "missions")
async def show_calculator(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    try:
        keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)
        await callback.message.edit_text(
            "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏—Å—Å–∏–π FLL - –ë–æ–≥–∞—Ç—ã–π —É—Ä–æ–∂–∞–π**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–∫–æ–≤:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("calc_mission_"))
async def show_mission_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∏—Å—Å–∏–∏"""
    try:
        mission_id = callback.data.replace("calc_", "")
        if mission_id not in fll_calculator.missions:
            await callback.answer("–ú–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        mission_name = fll_calculator.missions[mission_id]["name"]
        current_score = fll_calculator.get_mission_score(callback.from_user.id, mission_id)

        keyboard = fll_calculator.get_mission_keyboard(mission_id)
        await callback.message.edit_text(
            f"üéØ **{mission_name}**\n\n"
            f"–¢–µ–∫—É—â–∏–µ –æ—á–∫–∏: {current_score}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("calc_set_"))
async def set_mission_score(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—á–∫–∏ –∑–∞ –º–∏—Å—Å–∏—é"""
    try:
        parts = callback.data.split("_")
        if len(parts) < 4:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return

        mission_id = f"{parts[2]}_{parts[3]}"
        score = int(parts[4])

        success = fll_calculator.set_mission_score(callback.from_user.id, mission_id, score)

        if success:
            keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)
            await callback.message.edit_text(
                "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏—Å—Å–∏–π FLL - –ë–æ–≥–∞—Ç—ã–π —É—Ä–æ–∂–∞–π**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–∫–æ–≤:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer(f"‚úÖ –û—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {score}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—á–∫–æ–≤!")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "calc_total")
async def show_total_score(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É –æ—á–∫–æ–≤"""
    try:
        breakdown = fll_calculator.get_score_breakdown(callback.from_user.id)
        keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)

        await callback.message.edit_text(
            breakdown,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "calc_reset")
async def reset_calculator(callback: CallbackQuery):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –æ—á–∫–∏"""
    try:
        fll_calculator.reset_scores(callback.from_user.id)
        keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)

        await callback.message.edit_text(
            "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏—Å—Å–∏–π FLL - –ë–æ–≥–∞—Ç—ã–π —É—Ä–æ–∂–∞–π**\n\n"
            "–í—Å–µ –æ—á–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–∫–æ–≤:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer("üîÑ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–±—Ä–æ—à–µ–Ω!")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "calc_back")
async def back_to_calculator(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    try:
        keyboard = fll_calculator.get_main_keyboard(callback.from_user.id)
        await callback.message.edit_text(
            "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏—Å—Å–∏–π FLL - –ë–æ–≥–∞—Ç—ã–π —É—Ä–æ–∂–∞–π**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–∫–æ–≤:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")



@router.callback_query(F.data == "calc_save")
async def show_save_options(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    try:
        user_id = callback.from_user.id
        total_score = fll_calculator.get_total_score(user_id)
        
        if total_score == 0:
            await callback.answer("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è! –°–Ω–∞—á–∞–ª–∞ –Ω–∞–±–µ—Ä–∏—Ç–µ –æ—á–∫–∏.")
            return
        
        keyboard = fll_calculator.get_save_keyboard()
        await callback.message.edit_text(
            f"üíæ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤**\n\n"
            f"üéØ –û–±—â–∏–π —Å—á–µ—Ç: {total_score}\n"
            f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π: {fll_calculator.get_max_possible_score()}\n\n"
            f"–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "calc_save_simple")
async def save_results(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ"""
    try:
        user_id = callback.from_user.id
        total_score = fll_calculator.get_total_score(user_id)
        
        if total_score == 0:
            await callback.answer("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        current_datetime = datetime.now()
        formatted_datetime = current_datetime.strftime('%d.%m.%Y –≤ %H:%M')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–∫–∞–ª—å–Ω–æ
        new_result = local_storage.save_result(
            user_id=user_id,
            mission_scores=fll_calculator.get_user_scores_dict(user_id),
            total_score=total_score,
            max_possible_score=fll_calculator.get_max_possible_score(),
            name=f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç {formatted_datetime}"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É
        keyboard = fll_calculator.get_main_keyboard(user_id)
        await callback.message.edit_text(
            "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏—Å—Å–∏–π FLL - –ë–æ–≥–∞—Ç—ã–π —É—Ä–æ–∂–∞–π**\n\n"
            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            f"üìÖ –î–∞—Ç–∞: {formatted_datetime}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–∫–æ–≤:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")





@router.callback_query(F.data == "calc_my_results")
async def show_my_results(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        results = local_storage.get_user_results(user_id)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        results.sort(key=lambda x: x.created_at, reverse=True)
        
        if not results:
            keyboard = fll_calculator.get_main_keyboard(user_id)
            await callback.message.edit_text(
                "üßÆ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏—Å—Å–∏–π FLL - –ë–æ–≥–∞—Ç—ã–π —É—Ä–æ–∂–∞–π**\n\n"
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—á–∫–æ–≤:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer("üìã –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return
        
        keyboard = fll_calculator.get_results_keyboard(results)
        await callback.message.edit_text(
            "üìã **–ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("calc_view_result_"))
async def view_result_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        result_id = int(callback.data.replace("calc_view_result_", ""))
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        result = local_storage.get_result_by_id(user_id, result_id)
        
        if not result:
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–∞—Ç—ã
        created_at = datetime.fromisoformat(result.created_at)
        detail_text = f"üìä **–î–µ—Ç–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞**\n\n"
        detail_text += f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {created_at.strftime('%d.%m.%Y –≤ %H:%M')}\n"
        detail_text += f"üéØ –û–±—â–∏–π —Å—á–µ—Ç: {result.total_score}/{result.max_possible_score}\n"
        detail_text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(result.total_score / result.max_possible_score * 100):.1f}%\n\n"
        
        detail_text += "üèÜ **–†–∞–∑–±–∏–≤–∫–∞ –ø–æ –º–∏—Å—Å–∏—è–º:**\n"
        for mission_id, score in result.mission_scores.items():
            mission_name = fll_calculator.missions.get(mission_id, {}).get('name', mission_id)
            max_points = fll_calculator.missions.get(mission_id, {}).get('max_points', 0)
            detail_text += f"‚Ä¢ {mission_name}: {score}/{max_points}\n"
        
        keyboard = fll_calculator.get_result_detail_keyboard(result_id)
        await callback.message.edit_text(
            detail_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("calc_delete_result_"))
async def delete_result(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result_id = int(callback.data.replace("calc_delete_result_", ""))
        user_id = callback.from_user.id
        
        # –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        success = local_storage.delete_result(user_id, result_id)
        
        if not success:
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await callback.answer("üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await show_my_results(callback)
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")


@router.callback_query(F.data == "calc_view_report")
async def show_report_choice(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞"""
    try:
        keyboard = fll_calculator.get_report_choice_keyboard()
        await callback.message.edit_text(
            "üìä **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞**\n\n"
            "üìã **–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ\n"
            "üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç** - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ Excel —Ñ–∞–π–ª–µ",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "calc_brief_report")
async def show_brief_report_period(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    try:
        keyboard = fll_calculator.get_report_period_keyboard("brief_report")
        await callback.message.edit_text(
            "üìã **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "calc_detailed_report")
async def show_detailed_report_period(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    try:
        keyboard = fll_calculator.get_report_period_keyboard("detailed_report")
        await callback.message.edit_text(
            "üìä **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel –æ—Ç—á—ë—Ç–∞:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("calc_brief_report_"))
async def generate_brief_report_with_period(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–µ—Ä–∏–æ–¥—É"""
    try:
        user_id = callback.from_user.id
        period = callback.data.replace("calc_brief_report_", "")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        from datetime import timedelta
        now = datetime.now()
        
        if period == "week":
            start_date = now - timedelta(days=7)
            period_name = "–Ω–µ–¥–µ–ª—é"
        elif period == "month":
            start_date = now - timedelta(days=30)
            period_name = "–º–µ—Å—è—Ü"
        elif period == "half_year":
            start_date = now - timedelta(days=180)
            period_name = "–ø–æ–ª–≥–æ–¥–∞"
        elif period == "year":
            start_date = now - timedelta(days=365)
            period_name = "–≥–æ–¥"
        elif period == "all":
            start_date = None
            period_name = "–≤—Å—ë –≤—Ä–µ–º—è"
        else:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–µ
        results = local_storage.get_results_by_period(user_id, start_date)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        results.sort(key=lambda x: x.created_at, reverse=True)
        
        if not results:
            back_button = [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="calc_brief_report")]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[back_button])
            await callback.message.edit_text(
                f"üìã **–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –∑–∞ {period_name}**\n\n"
                f"–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç
        report_text = fll_calculator.generate_brief_report(results)
        report_text = f"üìã **–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –∑–∞ {period_name}**\n\n" + report_text
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_button = [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="calc_my_results")]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[back_button])
        
        await callback.message.edit_text(
            report_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}")


@router.callback_query(F.data.startswith("calc_detailed_report_"))
async def generate_detailed_report_with_period(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π Excel –æ—Ç—á—ë—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–µ—Ä–∏–æ–¥—É"""
    try:
        user_id = callback.from_user.id
        period = callback.data.replace("calc_detailed_report_", "")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        from datetime import timedelta
        now = datetime.now()
        
        if period == "week":
            start_date = now - timedelta(days=7)
            period_name = "–Ω–µ–¥–µ–ª—é"
        elif period == "month":
            start_date = now - timedelta(days=30)
            period_name = "–º–µ—Å—è—Ü"
        elif period == "half_year":
            start_date = now - timedelta(days=180)
            period_name = "–ø–æ–ª–≥–æ–¥–∞"
        elif period == "year":
            start_date = now - timedelta(days=365)
            period_name = "–≥–æ–¥"
        elif period == "all":
            start_date = None
            period_name = "–≤—Å—ë –≤—Ä–µ–º—è"
        else:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–µ
        results = local_storage.get_results_by_period(user_id, start_date)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        results.sort(key=lambda x: x.created_at, reverse=True)
        
        if not results:
            await callback.answer(f"‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {period_name} –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞!")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á—ë—Ç
        excel_file = fll_calculator.generate_detailed_excel_report(results)
        
        if excel_file is None:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞!")
            return
        
        # –°–æ–∑–¥–∞—ë–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–∏–æ–¥–æ–º –∏ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        current_date = datetime.now().strftime('%Y-%m-%d_%H-%M')
        period_suffix = {
            "week": "–Ω–µ–¥–µ–ª—è",
            "month": "–º–µ—Å—è—Ü", 
            "half_year": "–ø–æ–ª–≥–æ–¥–∞",
            "year": "–≥–æ–¥",
            "all": "–≤—Å–µ_–≤—Ä–µ–º—è"
        }.get(period, period)
        filename = f"FLL_–æ—Ç—á—ë—Ç_{period_suffix}_{current_date}.xlsx"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            document=types.BufferedInputFile(
                excel_file.getvalue(),
                filename=filename
            ),
            caption=f"üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç FLL –∑–∞ {period_name}**\n\n"
                   "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
                   "‚Ä¢ –û–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                   "‚Ä¢ –†–∞–∑–±–∏–≤–∫—É –ø–æ –º–∏—Å—Å–∏—è–º\n"
                   "‚Ä¢ –°–≤–æ–¥–∫—É –ø–æ –º–∏—Å—Å–∏—è–º"
        )
        
        await callback.answer("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}")






