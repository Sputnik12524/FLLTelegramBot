from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo, InputMediaDocument
import contextlib
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update
from datetime import datetime
from typing import List

from database.models import User, Improvement
from keybords.improvement_kb import (
    get_improvement_main_keyboard,
    get_improvement_type_keyboard,
    get_improvement_confirm_keyboard,
    get_improvement_view_keyboard,
    get_improvement_list_keyboard,
    get_improvement_edit_keyboard
)
from keybords.keybord_client import kb_client

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ImprovementStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_files = State()
    waiting_for_edit_description = State()
    waiting_for_edit_files = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Ä–∞–±–æ—Ç–∫–∏
improvement_temp_data = {}

@router.callback_query(F.data == "changes")
async def show_improvement_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ—Ä–∞–±–æ—Ç–æ–∫"""
    try:
        keyboard = get_improvement_main_keyboard()
        await callback.message.edit_text(
            "üîß **–ú–æ–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏**\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–æ–±–æ—Ç–∞\n"
            "‚Ä¢ üíª –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–¥\n"
            "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "improvement_main")
async def back_to_improvement_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –¥–æ—Ä–∞–±–æ—Ç–æ–∫"""
    await show_improvement_menu(callback)

@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –±–æ—Ç–∞"""
    try:
        await callback.message.edit_text(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –õ–∏–≥–∏ –†–µ—à–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: ",
            reply_markup=kb_client
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.regexp(r"^improvement_add_(robot|code|other)$"))
async def start_adding_improvement(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        improvement_type = callback.data.replace("improvement_add_", "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(improvement_type=improvement_type)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_id = callback.from_user.id
        if user_id in improvement_temp_data:
            del improvement_temp_data[user_id]
        
        # –®–∞–≥ 1: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        await state.set_state(ImprovementStates.waiting_for_title)
        
        type_names = {
            "robot": "—Ä–æ–±–æ—Ç–∞",
            "code": "–∫–æ–¥–∞",
            "other": "–¥–æ—Ä–∞–±–æ—Ç–∫–∏"
        }
        
        await callback.message.edit_text(
            f"üè∑Ô∏è **–ù–∞–∑–≤–∞–Ω–∏–µ {type_names.get(improvement_type, '–¥–æ—Ä–∞–±–æ—Ç–∫–∏')}**\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="improvement_main")]
            ])
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
@router.message(ImprovementStates.waiting_for_title)
async def handle_improvement_title(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        title = (message.text or "").strip()
        if not title:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!")
            return
        if len(title) > 100:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        await state.update_data(title=title)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        await state.set_state(ImprovementStates.waiting_for_description)
        await message.answer(
            "üìù **–û–ø–∏—Å–∞–Ω–∏–µ**\n\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –¥–æ—Ä–∞–±–æ—Ç–∫—É (—á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="improvement_main")]
            ])
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.message(ImprovementStates.waiting_for_description)
async def handle_improvement_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        description = message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(description=description)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤
        await state.set_state(ImprovementStates.waiting_for_files)
        
        await message.answer(
            "üì∏ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤**\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∞—à–µ–π –¥–æ—Ä–∞–±–æ—Ç–∫–æ–π.\n"
            "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ø–æ–¥—Ä—è–¥.\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="improvement_files_done")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="improvement_main")]
            ])
        )
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.message(ImprovementStates.waiting_for_files)
async def handle_improvement_files(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        user_id = message.from_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in improvement_temp_data:
            improvement_temp_data[user_id] = {
                "file_ids": [],
                "files_info": []
            }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
        if message.photo:
            file_id = message.photo[-1].file_id
            file_type = "—Ñ–æ—Ç–æ"
        elif message.video:
            file_id = message.video.file_id
            file_type = "–≤–∏–¥–µ–æ"
        elif message.document:
            file_id = message.document.file_id
            file_type = "–¥–æ–∫—É–º–µ–Ω—Ç"
        else:
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        improvement_temp_data[user_id]["file_ids"].append(file_id)
        improvement_temp_data[user_id]["files_info"].append({
            "type": file_type,
            "file_id": file_id
        })
        
        await message.answer(
            f"‚úÖ {file_type.capitalize()} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(improvement_temp_data[user_id]['file_ids'])}"
        )
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

@router.callback_query(F.data == "improvement_files_done")
async def finish_adding_files(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"""
    try:
        user_id = callback.from_user.id
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        temp_data = improvement_temp_data.get(user_id, {})
        file_ids = temp_data.get("file_ids", [])
        files_info = temp_data.get("files_info", [])
        
        improvement_type = data.get("improvement_type")
        title = data.get("title")
        description = data.get("description")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        type_names = {
            "robot": "—Ä–æ–±–æ—Ç–∞",
            "code": "–∫–æ–¥–∞", 
            "other": "–¥–æ—Ä–∞–±–æ—Ç–∫–∏"
        }
        
        preview_text = f"üìã **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä {type_names.get(improvement_type, '–¥–æ—Ä–∞–±–æ—Ç–∫–∏')}**\n\n"
        if title:
            preview_text += f"üè∑Ô∏è **–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n"
        preview_text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n\n"
        
        if files_info:
            preview_text += "üìé **–§–∞–π–ª—ã:**\n"
            for i, file_info in enumerate(files_info, 1):
                preview_text += f"{i}. {file_info['type'].capitalize()}\n"
        else:
            preview_text += "üìé **–§–∞–π–ª—ã:** –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n"
        
        preview_text += "\n–í—Å—ë –≤–µ—Ä–Ω–æ? –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = get_improvement_confirm_keyboard(improvement_type)
        
        await callback.message.edit_text(
            preview_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith("improvement_confirm_"))
async def confirm_improvement(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫—É"""
    try:
        user_id = callback.from_user.id
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        temp_data = improvement_temp_data.get(user_id, {})
        file_ids = temp_data.get("file_ids", [])
        
        improvement_type = data.get("improvement_type")
        title = data.get("title")
        description = data.get("description")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_query = await session.execute(
            select(User).where(User.tg_id == user_id)
        )
        user_obj = user_query.scalar_one_or_none()
        
        if not user_obj:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Ä–∞–±–æ—Ç–∫—É
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö (—Ç–∏–ø + file_id), –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        files_info = improvement_temp_data.get(user_id, {}).get("files_info")
        files_payload = files_info if files_info else (file_ids if file_ids else None)

        new_improvement = Improvement(
            user_tg_id=user_id,
            team_id=user_obj.team_id,
            improvement_type=improvement_type,
            title=title,
            description=description,
            file_ids=files_payload
        )
        
        session.add(new_improvement)
        await session.commit()
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in improvement_temp_data:
            del improvement_temp_data[user_id]
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        type_names = {
            "robot": "—Ä–æ–±–æ—Ç–∞",
            "code": "–∫–æ–¥–∞",
            "other": "–¥–æ—Ä–∞–±–æ—Ç–∫–∏"
        }
        
        await callback.message.edit_text(
            f"‚úÖ **{type_names.get(improvement_type, '–î–æ—Ä–∞–±–æ—Ç–∫–∞')} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
            + (f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n" if title else "")
            + f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            + f"üìé –§–∞–π–ª–æ–≤: {len(file_ids) if file_ids else 0}\n\n"
            + "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏'",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ú–æ–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏", callback_data="improvement_my_list")],
                [InlineKeyboardButton(text="üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ—Ä–∞–±–æ—Ç–æ–∫", callback_data="improvement_main")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        
        await callback.answer("‚úÖ –î–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

@router.callback_query(F.data == "improvement_my_list")
async def show_my_improvements(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Ä–∞–±–æ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        improvements_query = await session.execute(
            select(Improvement)
            .where(Improvement.user_tg_id == user_id)
            .order_by(Improvement.created_at.desc())
        )
        improvements = improvements_query.scalars().all()
        
        if not improvements:
            await callback.message.edit_text(
                "üìã **–ú–æ–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ—Ä–∞–±–æ—Ç–æ–∫.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –¥–æ—Ä–∞–±–æ—Ç–∫—É!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ä–æ–±–æ—Ç–∞", callback_data="improvement_add_robot")],
                    [InlineKeyboardButton(text="üíª –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥", callback_data="improvement_add_code")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="improvement_main")]
                ]),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Ä–∞–±–æ—Ç–æ–∫
        keyboard = get_improvement_list_keyboard(improvements)
        
        await callback.message.edit_text(
            f"üìã **–ú–æ–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏**\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–æ–∫: {len(improvements)}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data == "improvement_team_list")
async def show_team_improvements(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Ä–∞–±–æ—Ç–æ–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥—É
        user_q = await session.execute(select(User).where(User.tg_id == user_id))
        user_obj = user_q.scalar_one_or_none()
        if not user_obj or not user_obj.team_id:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã
        improvements_query = await session.execute(
            select(Improvement)
            .where(Improvement.team_id == user_obj.team_id)
            .order_by(Improvement.created_at.desc())
        )
        improvements = improvements_query.scalars().all()
        if not improvements:
            await callback.message.edit_text(
                "üë• **–î–æ—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã**\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–æ–∫ –≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="improvement_main")]
                ]),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
        buttons = []
        for imp in improvements:
            # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞
            author_text = None
            try:
                chat = await callback.bot.get_chat(imp.user_tg_id)
                if getattr(chat, 'username', None):
                    author_text = f"@{chat.username}"
                else:
                    author_text = chat.full_name or str(imp.user_tg_id)
            except Exception:
                author_text = str(imp.user_tg_id)

            emoji = "ü§ñ" if imp.improvement_type == "robot" else "üíª" if imp.improvement_type == "code" else "üìù"
            title_or_desc = imp.title or imp.description or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
            base_text = title_or_desc[:30] + ("..." if len(title_or_desc) > 30 else "")
            text = f"{emoji} {base_text} ‚Äî –æ—Ç {author_text}"
            buttons.append([InlineKeyboardButton(text=text, callback_data=f"improvement_view_{imp.id}")])

        buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="improvement_main")])

        await callback.message.edit_text(
            f"üë• **–î–æ—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã**\n\n–ù–∞–π–¥–µ–Ω–æ: {len(improvements)}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith("improvement_view_"))
async def view_improvement_detail(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        improvement_id = int(callback.data.replace("improvement_view_", ""))
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ä–∞–±–æ—Ç–∫—É
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫—É –≤–ª–∞–¥–µ–ª—å—Ü—É –∏ –ª—é–±–æ–º—É —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫—É
        improvement_query = await session.execute(
            select(Improvement)
            .join(User, User.team_id == Improvement.team_id, isouter=True)
            .where(Improvement.id == improvement_id)
        )
        improvement = improvement_query.scalar_one_or_none()
        
        if not improvement:
            await callback.answer("‚ùå –î–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞: –ª–∏–±–æ –≤–ª–∞–¥–µ–ª–µ—Ü, –ª–∏–±–æ –æ–¥–∏–Ω team_id
        user_q = await session.execute(select(User).where(User.tg_id == user_id))
        me = user_q.scalar_one_or_none()
        if not me or (improvement.user_tg_id != user_id and me.team_id != improvement.team_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–µ")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        type_names = {
            "robot": "—Ä–æ–±–æ—Ç–∞",
            "code": "–∫–æ–¥–∞",
            "other": "–¥–æ—Ä–∞–±–æ—Ç–∫–∏"
        }
        
        detail_text = f"üîß **–î–µ—Ç–∞–ª–∏ {type_names.get(improvement.improvement_type, '–¥–æ—Ä–∞–±–æ—Ç–∫–∏')}**\n\n"
        if getattr(improvement, 'title', None):
            detail_text += f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {improvement.title}\n"
        detail_text += f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {improvement.created_at.strftime('%d.%m.%Y –≤ %H:%M')}\n"
        
        # –ê–≤—Ç–æ—Ä (–¥–ª—è –¥–µ—Ç–∞–ª–µ–π)
        author_text = None
        try:
            chat = await callback.bot.get_chat(improvement.user_tg_id)
            if getattr(chat, 'username', None):
                author_text = f"@{chat.username}"
            else:
                author_text = chat.full_name or str(improvement.user_tg_id)
        except Exception:
            author_text = str(improvement.user_tg_id)

        detail_text += f"üë§ –ê–≤—Ç–æ—Ä: {author_text}\n"

        if improvement.description:
            detail_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {improvement.description}\n"
        
        files = improvement.file_ids or []
        if isinstance(files, list) and files:
            detail_text += f"üìé –§–∞–π–ª–æ–≤: {len(files)}\n"
        else:
            detail_text += "üìé –§–∞–π–ª–æ–≤: –ù–µ—Ç\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Ä–∞–±–æ—Ç–∫–æ–π
        keyboard = get_improvement_view_keyboard(improvement.id)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∫–∞–∂–µ–º –∏—Ö: –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏,
        # –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö ‚Äî –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É —Å –ø–æ–¥–ø–∏—Å—å—é –Ω–∞ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –∏ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        files_to_show = []
        if isinstance(files, list):
            for item in files[:10]:  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 10 –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø–µ
                if isinstance(item, dict):
                    ftype = item.get("type")
                    fid = item.get("file_id")
                else:
                    # —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—Ä–æ—Å—Ç–æ file_id -> —Å—á–∏—Ç–∞–µ–º —Ñ–æ—Ç–æ
                    ftype = "—Ñ–æ—Ç–æ"
                    fid = item
                if not fid:
                    continue
                if ftype == "—Ñ–æ—Ç–æ":
                    files_to_show.append(("photo", fid))
                elif ftype == "–≤–∏–¥–µ–æ":
                    files_to_show.append(("video", fid))
                elif ftype == "–¥–æ–∫—É–º–µ–Ω—Ç":
                    files_to_show.append(("document", fid))

        try:
            if files_to_show:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∑–∞—Ç–µ–º —Ñ–æ—Ç–æ, –∑–∞—Ç–µ–º –≤–∏–¥–µ–æ
                priority = {"document": 0, "photo": 1, "video": 2}
                files_to_show.sort(key=lambda x: priority.get(x[0], 3))

                if len(files_to_show) == 1:
                    mtype, fid = files_to_show[0]
                    if mtype == "photo":
                        await callback.message.answer_photo(photo=fid, caption=detail_text, parse_mode="Markdown", reply_markup=keyboard)
                    elif mtype == "video":
                        await callback.message.answer_video(video=fid, caption=detail_text, parse_mode="Markdown", reply_markup=keyboard)
                    else:
                        await callback.message.answer_document(document=fid, caption=detail_text, parse_mode="Markdown", reply_markup=keyboard)
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                    with contextlib.suppress(Exception):
                        await callback.message.delete()
                else:
                    media_group = []
                    for idx, (mtype, fid) in enumerate(files_to_show):
                        if mtype == "photo":
                            if idx == 0:
                                media_group.append(InputMediaPhoto(media=fid, caption=detail_text, parse_mode="Markdown"))
                            else:
                                media_group.append(InputMediaPhoto(media=fid))
                        elif mtype == "video":
                            if idx == 0:
                                media_group.append(InputMediaVideo(media=fid, caption=detail_text, parse_mode="Markdown"))
                            else:
                                media_group.append(InputMediaVideo(media=fid))
                        else:
                            if idx == 0:
                                media_group.append(InputMediaDocument(media=fid, caption=detail_text, parse_mode="Markdown"))
                            else:
                                media_group.append(InputMediaDocument(media=fid))
                    await callback.message.answer_media_group(media_group)
                    # –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
                    with contextlib.suppress(Exception):
                        await callback.message.delete()
            else:
                # –í–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await callback.message.edit_text(
                    detail_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞, fallback ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(
                detail_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith("improvement_delete_"))
async def delete_improvement(callback: CallbackQuery, session: AsyncSession):
    """–£–¥–∞–ª—è–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫—É"""
    try:
        improvement_id = int(callback.data.replace("improvement_delete_", ""))
        user_id = callback.from_user.id
        
        # –£–¥–∞–ª—è–µ–º –¥–æ—Ä–∞–±–æ—Ç–∫—É
        delete_query = await session.execute(
            select(Improvement).where(
                Improvement.id == improvement_id,
                Improvement.user_tg_id == user_id
            )
        )
        improvement = delete_query.scalar_one_or_none()
        
        if not improvement:
            await callback.answer("‚ùå –î–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        await session.delete(improvement)
        await session.commit()
        
        await callback.answer("üóëÔ∏è –î–æ—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –¥–æ—Ä–∞–±–æ—Ç–æ–∫
        await show_my_improvements(callback, session)
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")

@router.callback_query(F.data.regexp(r"^improvement_edit_\d+$"))
async def edit_improvement_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        improvement_id = int(callback.data.replace("improvement_edit_", ""))
        
        keyboard = get_improvement_edit_keyboard(improvement_id)

        text = (
            "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ-–∏—Å—Ç–æ—á–Ω–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback
        try:
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        except Exception:
            try:
                await callback.message.edit_caption(text, reply_markup=keyboard, parse_mode="Markdown")
            except Exception:
                await callback.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith("improvement_add_files_"))
async def start_add_files_to_improvement(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–æ—Ä–∞–±–æ—Ç–∫–µ"""
    try:
        improvement_id = int(callback.data.replace("improvement_add_files_", ""))
        await state.update_data(editing_improvement_id=improvement_id)
        await state.set_state(ImprovementStates.waiting_for_edit_files)

        prompt_text = (
            "üì∏ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –¥–æ—Ä–∞–±–æ—Ç–∫–µ.\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'"
        )
        prompt_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="improvement_edit_files_done")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"improvement_view_{improvement_id}")]
        ])

        try:
            await callback.message.edit_text(prompt_text, reply_markup=prompt_kb, parse_mode="Markdown")
        except Exception:
            try:
                await callback.message.edit_caption(prompt_text, reply_markup=prompt_kb, parse_mode="Markdown")
            except Exception:
                await callback.message.answer(prompt_text, reply_markup=prompt_kb, parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.message(ImprovementStates.waiting_for_edit_files)
async def handle_add_files_to_improvement(message: Message, state: FSMContext):
    """–ö–æ–ø–∏—Ç –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–æ—Ä–∞–±–æ—Ç–∫–µ"""
    try:
        data = await state.get_data()
        bucket = data.get("edit_files_bucket") or []

        if message.photo:
            fid = message.photo[-1].file_id
            bucket.append({"type": "—Ñ–æ—Ç–æ", "file_id": fid})
        elif message.video:
            fid = message.video.file_id
            bucket.append({"type": "–≤–∏–¥–µ–æ", "file_id": fid})
        elif message.document:
            fid = message.document.file_id
            bucket.append({"type": "–¥–æ–∫—É–º–µ–Ω—Ç", "file_id": fid})
        else:
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã!")
            return

        await state.update_data(edit_files_bucket=bucket)
        await message.answer(f"‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(bucket)}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

@router.callback_query(F.data == "improvement_edit_files_done")
async def finish_add_files_to_improvement(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ë–î"""
    try:
        data = await state.get_data()
        improvement_id = data.get("editing_improvement_id")
        new_files = data.get("edit_files_bucket") or []

        if not improvement_id:
            await callback.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–æ—Ä–∞–±–æ—Ç–∫—É
        imp_q = await session.execute(
            select(Improvement).where(Improvement.id == improvement_id)
        )
        imp = imp_q.scalar_one_or_none()
        if not imp:
            await callback.answer("‚ùå –î–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü—Ä–∏–≤–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É [{type,file_id}]
        existing = []
        if isinstance(imp.file_ids, list):
            for item in imp.file_ids:
                if isinstance(item, dict):
                    if item.get("file_id"):
                        existing.append({"type": item.get("type", "—Ñ–æ—Ç–æ"), "file_id": item.get("file_id")})
                else:
                    existing.append({"type": "—Ñ–æ—Ç–æ", "file_id": item})

        updated_files = existing + new_files

        await session.execute(
            update(Improvement)
            .where(Improvement.id == improvement_id)
            .values(file_ids=updated_files, updated_at=datetime.now())
        )
        await session.commit()

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(edit_files_bucket=[])
        await state.set_state(None)

        success_text = "‚úÖ –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –¥–æ—Ä–∞–±–æ—Ç–∫–µ!"
        success_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîß –ö –¥–æ—Ä–∞–±–æ—Ç–∫–µ", callback_data=f"improvement_view_{improvement_id}")],
            [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É", callback_data="improvement_my_list")]
        ])

        try:
            await callback.message.edit_text(success_text, reply_markup=success_kb)
        except Exception:
            try:
                await callback.message.edit_caption(success_text, reply_markup=success_kb)
            except Exception:
                await callback.message.answer(success_text, reply_markup=success_kb)
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")

@router.callback_query(F.data.startswith("improvement_remove_files_"))
async def remove_all_files_from_improvement(callback: CallbackQuery, session: AsyncSession):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —É –¥–æ—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        improvement_id = int(callback.data.replace("improvement_remove_files_", ""))
        # –û–±–Ω—É–ª—è–µ–º —Ñ–∞–π–ª—ã
        await session.execute(
            update(Improvement)
            .where(Improvement.id == improvement_id)
            .values(file_ids=None, updated_at=datetime.now())
        )
        await session.commit()
        await callback.answer("üóëÔ∏è –í—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        await show_my_improvements(callback, session)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")
@router.callback_query(F.data.startswith("improvement_edit_desc_"))
async def start_edit_description(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        improvement_id = int(callback.data.replace("improvement_edit_desc_", ""))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(editing_improvement_id=improvement_id)
        await state.set_state(ImprovementStates.waiting_for_edit_description)
        
        prompt_text = (
            "üìù **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏:"
        )
        prompt_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"improvement_view_{improvement_id}")]
        ])

        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –º–æ–≥–ª–æ –±—ã—Ç—å –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî —Ç–æ–≥–¥–∞ edit_text —É–ø–∞–¥—ë—Ç.
        # –î–µ–ª–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: edit_text -> edit_caption -> answer
        try:
            await callback.message.edit_text(prompt_text, reply_markup=prompt_kb, parse_mode="Markdown")
        except Exception:
            try:
                await callback.message.edit_caption(prompt_text, reply_markup=prompt_kb, parse_mode="Markdown")
            except Exception:
                await callback.message.answer(prompt_text, reply_markup=prompt_kb, parse_mode="Markdown")
        
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.message(ImprovementStates.waiting_for_edit_description)
async def handle_edit_description(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        new_description = message.text
        data = await state.get_data()
        improvement_id = data.get("editing_improvement_id")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await session.execute(
            update(Improvement)
            .where(Improvement.id == improvement_id)
            .values(
                description=new_description,
                updated_at=datetime.now()
            )
        )
        await session.commit()
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await message.answer(
            "‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
            f"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {new_description}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîß –ö –¥–æ—Ä–∞–±–æ—Ç–∫–µ", callback_data=f"improvement_view_{improvement_id}")],
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É", callback_data="improvement_my_list")]
            ])
        )
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
